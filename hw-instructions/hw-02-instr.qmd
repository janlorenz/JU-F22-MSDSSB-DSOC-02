---
title: "Homework 02"
subtitle: "Data Visualization, Data Wrangling, Starting Projects "
---

```{r include = FALSE}
library(tidyverse)
```

The goals of this assignment are

1. to introduce you to Data Visualization and Data Wrangling with R and python, and
2. to let you start with two projects we will pursue in following homeworks - one on the European Social Survey and one on the corona pandemic. 

To that end, we provide three repositories with starter documents which you should clone and push your solutions to: 
* hw-02-USERNAME
* ess-USERNAME
* corona-USERNAME

# Data Visualization and Data Wrangling with `nycflights13`

Clone your repository **hw-02-USERNAME** and find the two files: 

* hw-02-R.qmd
* hw-02-python.qmd

Fill in you name in the YAML and render both. Stage the modified .qmd files and add the html-files in Git and make a commit with message "Rendering to html works". Push this commit to GitHub.

## Data overview

1. Run the first chunk `packages-data` such that the lines are executed in the console to load the tidyverse functions and the ny3cflight13 data. 
See which dataframes are available in the Environment tab. The environment should be empty, but you can select "package:nycflights13" instead of "Global Environment" and you see values markes as `<Promise>`. Once you click on one or call it in the Console you see basic information there. 

2. Replace the "??" in the text with the actual numbers. Don't write the numbers your self, but write *inline code* in which you output the number of rows of each data frame. In the document this already done for the `airlines`.
Render the document to see if it works. More information <https://quarto.org/docs/get-started/computations/rstudio.html#inline-code>

3. Explore the datasets. Write `View(flights)` in the Console to see the data as a spreadsheet. Write `glimpse(flight)` to see an overview of all variables, their types and first values. As these dataframes come from a package there is also a Help page for each dataframe which you access with `?flights`. There you find short descriptions about each variable. 

Write a nicely formatted short description about the variables `origin`, `arr_delay`, and `dep_delay` from `flights` and `engine` and `seat` from `airports`. 

## Data visualizations

1. We first want to know the distribution of values of the categorical variable `origin` in `flights`. To that end,  make a bar chart. Read the Help `?geom_bar` and decide if you need to use `geom_bar` or `geom_col`. You can use the template below. Write your solution in the chunk `flightsorigin`. Test your line by sending it the Console (with Ctrl + Enter). Once you are satisfied, render the document, commit the changes with message "First Visualization!" and push it. In the following, you can commit and push when you want. (Note, that we can provide help directly in your repo when you commit and push before.) This is the template. 
```R
ggplot(data = __________, mapping = aes(x = ________) + 
  geom_TOSELECT()
``` 

2. Now, we want to know the distribution of values of the numerical variable `distance` in `flights`. A common visualization is a histogram. Use `geom-histogram` with the same template, write the solution in the chunk `flightsdistance`, and test it. Notice, the red comment in the console. It advises to specify a binwidth. Test `bin-width = 5`, `bin-width = 50`, and `bin-width = 500` in `geom_histogram`, notice the difference (consult `?geom_histogram`) for details, and decide which shows the distribution best. 

3. In chunk `distributions` you see two ways to visualize the distribution of the number of `seats` in `airplanes` -  points for each observation and a boxplot. (Read `?geom_boxplot` for more information). Note, that there are three ggplot objects (`g1`, `g2`, `g3`) which are shown combined with `g1 + g2 + g3` (using the `patchwork` package). Make the empty `g3` into a vertical histogram for the same data following the exercise before. Hint: For the vertical histogram assign `distance` to the `y` aesthetic and leave out the `x` aesthetic. Think about the advantages and disadvantages of each visualization. 

4. Now, we make the first plot which visualizes two variables, the categorical variable `engine`, and the numerical variable `seats` in `airplanes`. Use the template and with aesthetics `x` and `y` and the `geom_boxplot` and put the solution into the chunk `engine-seats`

5. Two numerical variables can be visualized with a scatter plot using `geom_point` and the aesthetics `x` and `y`. Let us look at `dep_delay` and `arr_delay` of `flights`. Warning: The `flights` is very large! So, do not use `flights` in `data = _____` but a random sample of 10,000 flights `sample_n(flights, 10000)`. Now, let us add information about the categorical variable `origin` and assign it to the `color` aesthetic. Put your solution into the chunk `delays`. Test your solution several times and observe the changes in the visualization because of the random sampling. In which region are the changes most *substantial*? (This is a qualitative judgment.)

6. Finally, let us visualize the location of `airports` as points at their *longitude* and *latitude* (look up the variable names) and color them with the timezone `tzone` they are in. Put the solution into the chunk `airportlocations`.

## Data wrangling, pipes, and visualization

In the following, you have to solve some data wrangling tasks. 
For data wrangling, the usage of the pipe, or a chain of pipes, is convenient. 
You can also use the pipe to finish with a visualization. 

1. Put the code snippet below into the chunk `flightsaveragespeed` and test it. The `mutate` line makes a new variable called `speed` which is the distance of the flight divided by the time in the air. The `select` line selects variables from the dataset. In this case, it selects `air_time` as the first, `distance` as the second, and the new `speed` as the third variable. All other variables are dropped.   
The values in the new speed variable do not look like speeds of airplanes in km/h. Why? Because they are in miles/minute which we know from the variable descriptions. Modify the equation in the mutate command such that the values are in km/h. To that end, you have to divide air time by 60 and multiply distance by a certain factor. Look up the factor. Be careful with the order of mathematical operations and maybe use brackets `()`. Test your computation. Are the speed values reasonable?   
Now, make a histogram of speed. Add another pipe after the `select` statement and write `ggplot(mapping = aes())` in the next line. Note, that you should not put `data = flights` into the argument of `ggplot()`! It is the mission of the pipe to do this. Fill out the `aes()` command accordingly, and add the geom for a histogram. 
```R
flights |> 
  mutate(speed = distance / air_time ) |> 
  select(air_time, distance, speed)
```

2. Practice `filter` operations, which subsets certain observations of a dataframe. Write a line which filters the flights which
  a. had an arrival delay of two or more hours
  b. flew to Houston (IAH or HOU)
  c. arrived more than two hours late, but didnâ€™t leave late
  d. started with a delay of at least an hour, but made up over 30 minutes in flight. 
Put all four lines into the chunk `filtering`. 

3. Another common operation is summarizing data. Put the code below into the chunk `summarizing` and test it. You see the average delay at departure. (See `?mean` to learn what `na.rm = TRUE` is doing). Now, we want to know the average delay at departue for each of the three airports of `origin`. This is done with a `group_by` applied to the `flights`. Find out how and modify the code in the chunk accordingly. 
```R
flights |> 
  summarize(mean_dep_deplay = mean(dep_delay, na.rm = TRUE))
```

4. Finally, look at the plot of `airportlocations`. The airport locations show the shape of the United States of America, but there are four airports on the right hand side which do not fit that pattern. Filter `airports` such that you only see these four airport. Write your solution into the chunk `stangeairportlocations`. Check with internet research where these airports are located. Why are the locations from the data as they are? List your hypotheses for each airport under the chunk. 


# Starting a project on the European Social Survey

Clone your repository **ess-USERNAME**. This repository is empty. It shall develop into an analysis report based on data from the ![European Social Survey](https://www.europeansocialsurvey.org/) (ESS). The analysis shall be done with python. 


1. First download data from the ESS ![Data Wizard](https://ess-search.nsd.no/CDW/ConceptVariables). You need to register either with a google account or with a newly created account, but data access is free for non-commercial use. 

In step 1 **"Select Variables"** select the following:  
(Note, you can click and the variable text to get more context information about the variables.)

* Form "Politics ..." > "ESS standard ..."  select *euftf*, *gincdif*, *ginveco*, *lawobey*, *lrscale*, *polintr*, *stflife*, *trstplc*, *vote*, *imueclt*
* From "Subjective well-being ..." > "ESS standard ..." select *atchctr*, *atcherp*, *crmvct*, *pray*, *rlgdgr*, *sclact*
* From "Gender, age, ..." select *gndr*, *age*

In step 2 **Select country/round**, select rounds 3, 6, and 9 from all countries. 

Click on step 3 **Download** and **Login to Download**, select the CSV format. Save the dataset in your local ess-repository at "data/" (create this directory). Extract the zip file there. 

2. Create a new quarto file for analysis with python. Use the title "European Social Survey". 

3. Create one chunk where you import the data set into a dataframe `ESS`. Make a histogram of the variable `lrscale`. (Note: Would it be good to filter out certain observations before? If yes, go ahead?)

Commit all files, **except for the data file**! Push to GitHub. 



# Starting a project on the corona pandemic

Clone your repository **corona-USERNAME**. This repository is empty. It shall develop into an analysis report based on data about the corona pandemic. The analysis shall be done with R. 

Create a quarto file with the title "Corona", your name, html, and engine "Knitr". Find data through internet research. Download the data, ideally within you first a chunk using `download.file`. Import the data and make a plot which shows the evolution of new corona cases over time for one country of your choice. 

Commit all files, **except for the data file**! Push to GitHub. 




