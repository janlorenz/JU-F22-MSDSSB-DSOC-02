---
title: "Homework 02"
subtitle: "Data Visualization, Data Wrangling, Starting Projects "
# link-citations: yes
# editor: 
#   markdown: 
#     wrap: sentence
---

```{r include = FALSE}
# knitr::opts_chunk$set(
#   eval = FALSE,
#   out.width = "80%",
#   fig.asp = 0.618,
#   fig.width = 10
# )
library(tidyverse)
```

The goals of this assignment are

1. to introduce you to Data Visualization and Data Wrangling with R and python, and
2. to let you start with two projects we will pursue in following homeworks - one on the European Social Survey and one on the corona pandemic. 

To that end, we provide three repositories with starter documents which you should clone and push your solutions to: 

* hw-02-USERNAME
* ess-USERNAME
* corona-USERNAME

# Data Visualization and Data Wrangling with `nycflights13`

Clone your repository and find the two files: 

* hw-02-R.qmd
* hw-02-python.qmd

Fill in you name in the YAML and render both. Stage the modified .qmd files and add the two html-files in Git and make a commit with message "Rendering to html works". Push this commit to GitHub. 

## Data overview

1. Run the first chunk `packages-data` such that the lines are executed in the console to load the tidyverse functions and the ny3cflight13 data. 
See which dataframes are available in the Environment tab. The environment should be empty, but you can select "package:nycflights13" instead of "Global Environment" and you see values markes as `<Promise>`. Once you click on one or call it in the Console you see basic information there. 

2. Replace the "??" in the text with the actual numbers. Don't write the numbers your self, but write *inline code* in which you output the number of rows of each data frame. In the document this already done for the `airlines`.
Render the document to see if it works. More information <https://quarto.org/docs/get-started/computations/rstudio.html#inline-code>

3. Explore the datasets. Write `View(flights)` in the Console to see the data as a spreadsheet. Write `glimpse(flight)` to see an overview of all variables, their types and first values. As these dataframes come from a package there is also a Help page for each dataframe which you access with `?flights`. There you find short descriptions about each variable. 

TODO

## Data visualizations

1. We first want to know the distribution of values of the categorical variable `origin` in `flights`. To that end,  make a bar chart. Read the Help `?geom_bar` and decide if you need to use `geom_bar` or `geom_col`. You can use the template below. Write your solution in the chunk `flights$origin`. Test your line by sending it the Console (with Ctrl + Enter). Once you are satisfied, render the document, commit the changes with message "First Visualization!" and push it. In the following, you can commit and push when you want. (Note, that we can provide help directly in your repo when you commit and push before.) This is the template. 
```R
ggplot(data = __________, mapping = aes(x = ________) + 
  geom_TOSELECT()
``` 

2. Now, we want to know the distribution of values of the numerical variable `distance` in `flights`. A common visualization is a histogram. Use `geom-histogram` with the same template, write the solution in the respective chunk, and test it. Notice, the red comment in the console. It advises to specify a binwidth. Test `bin-width = 5`, `bin-width = 50`, and `bin-width = 500` in `geom_histogram`, notice the difference (consult `?geom_histogram`) for details, and decide which shows the distribution best. 

3. In chunk `distributions` you see two ways to visualize the distribution of the number of `seats` in `airplanes` -  points for each observation and a boxplot. (Read `?geom_boxplot` for more information). Note, that there are three ggplot objects (`g1`, `g2`, `g3`) which are shown combined with `g1 + g2 + g3` (using the `patchwork` package). Make the empty `g3` into a vertical histogram for the same data following the exercise before. Hint: For the vertical histogram assign `distance` to the `y` aesthetic and leave out the `x` aesthetic. Think about the advantages and disadvantages of each visualization. 

4. Now, we make the first plot which visualizes two variables, the categorical variable `engine`, and the numerical variable `seats` in `airplanes`. Use the template and with aesthetics `x` and `y` and the `geom_boxplot` and put the solution into the chunk `engine-seats`

5. Two numerical variables can be visualized with a scatter plot using `geom_point` and the aesthetics `x` and `y`. Let us look at `dep_delay` and `arr_delay` of `flights`. Warning: The `flights` is very large! So, do not use `flights` in `data = _____` but a random sample of 10,000 flights `sample_n(flights, 10000)`. Now, let us add information about the categorical variable `origin` and assign it to the `color` aesthetic. Put your solution into the chunk `delays`. Test your solution several times and observe the changes in the visualization because of the random sampling. In which region are the changes most *substantial*? (This is a qualitative judgment.)

6. Finally, let us visualize the location of `airports` as points at their *longitude* and *latitude* (look up the variable names) and color them with the timezone `tzone` they are in. Put the solution into the chunk `airportlocations`.

## Data wrangling, pipes, and visualization

In the following, you have to solve some data wrangling tasks 





# Starting a project on the European Social Survey

# Starting a project on the corona pandemis













# Getting started

## Prerequisites {data-link="Prerequisites"}

This assignment assumes that you have reviewed the lectures of week 1 and checked all boxes on the Prerequisites Checklist.

## Terminology

We've already thrown around a few new terms, so let's define them before we proceed.

-   **R** and **python**: Names of the programming language we will be using throughout the course.

-   **RStudio:** An integrated development environment developed for R, which can also work with python.
    In other words, a convenient interface for writing and running code.

-   **Git:** A version control system.

-   **GitHub:** A web platform for hosting version controlled files and facilitating collaboration among users.

-   **Repository:** A Git repository contains all of your project's files and stores each file's revision history.\

    It's common to refer to a repository as a *repo*.

    -   In this course, each assignment you work on will be contained in a Git repo.
    -   For individual assignments, only you will have access to the repo. For team assignments, all team members will have access to a single repo where they work collaboratively.
    -   All repos associated with this course are housed in the course GitHub organization. The organization is set up such that students can only see repos they have access to, but the course instructors can see all of them.

## Starting slowly step by step

As the course progresses, you are encouraged to explore beyond what the assignments dictate; a willingness to experiment will make you a much better programmer!
Before we get to that stage, however, you need to build some basic fluency in the tools and the workflow we use.
First, we will explore the fundamental building blocks of all of these tools.

Before you can get started with the analysis, you need to make sure you:

-   have a GitHub account

-   are a member of the course GitHub organization <https://github.com/JU-F22-MDSSB-MET-01>

-   have the needed software stack installation on your local machine (see the Prerequisites Checklist in the slides of the Week 1 lectures.)

If you failed to confirm any of these, it means you have not yet completed the prerequisites for this assignment.
Please go back to [Prerequisites] and complete them before continuing the assignment.

# Workflow

For each assignment in this course you will start with a GitHub repo that we create for you.
This contains the starter documents you will build upon when working on your assignment.
The first step is always to bring these files into RStudio so that you can edit them, run them, view your results, and interpret them.
This action of bringing the repos content to your machine is called **cloning**.

Then you will work in RStudio on the data analysis, making **commits** along the way (snapshots of your changes) and finally **push** all your work back to GitHub.

The next few steps will walk you through the process of getting information of the repo to be cloned, cloning your repo in a new RStudio Cloud project, and getting started with the analysis.

::: callout-important
If there is no GitHub repo created for you for this assignment, it means I didn't have your GitHub username as of when I assigned the homework.
Please let me know your GitHub username asap, and I can create your repo.
:::

## Step 0. Authenticate git to access your GitHub content

Before you can clone your repository you need to tell GitHub that you are authorized to do this, and to that end you need to make a Personal Access Token (PAT) in your GitHub account and make this available to git and RStudio on your local machine. 

There are several ways to do this (e.g. from the command line) but as we will use RStudio anyway, we can use a convenient way provided there. 

Read more about PATs and how to use them in "Happy Git with R" Chapter 9 <https://happygitwithr.com/https-pat.html> (in particular the TL;DR which describes what we use).

Open RStudio and install the packages `usethis` and `gitcreds` if you haven't done already: Go to the "Console" pane at the bottom left. Type in 

```r
install.packages(c("usethis","gitcreds"))
```

and hit Enter. Now the packages should be installed. 

Now, use two commands. Copy them to the console and click Enter:

``` r
usethis::create_github_token()
```

This opens <http://github.com> and you may need to log in.
Then you can make the PAT (read more details in "Happy Git with R").
For today, you can go the fast way and do not think about the options and click "Generate token".
Use the clipboard icon 📋 to copy the PAT.
Go back to RStudio and do in the console:

``` r
gitcreds::gitcreds_set()
```

In the dialog in the console paste your PAT from the clipboard and press Enter.
That should be it and you do not need to repeat these steps until the PAT expires. (If the PAT expires you have to make a new one in the same way.)



## Step 1. Get URL of repo to be cloned

On GitHub <https://github.com/JU-F22-MDSSB-MET-01>, open your repository for Homework 1.

![](img/clone-repo-link.png)

On GitHub, click on the green **Code** button, select **HTTPS** (this might already be selected by default, and if it is, you'll see the text *Use Git or checkout with SVN using the web URL*).
Click on the clipboard icon 📋 to copy the repo URL.

## Step 2. Go to RStudio

Go to your RStudio.
Select "New Project..." either from the File menu or from the special project menu on the top right of the RStudio window.

![](img/rstudio-new-project.png)

In the New Project Wizard, click on "Version Control" and then "Git".

::: callout-important
If "Version Control" or "Git" is not available in your RStudio, then either you haven't installed git on you computer or your RStudio installation has not recognized it properly.
In a correct installation RStudio would recognize git on your machine when started and makes the options available automatically.
You have to solve this issue first to continue.
:::

Then paste the repositories URL (which should still be in your clipboard) into the "Repository URL:" field.
Leave directory name as it is automatically chosen, but make sure that you create the directory in a the folder where you want to store the course material on your computer via the "Browse ..." button.

When you click "Create Project"

-   git will create a new directory in the folder, copies all the files from github to it, and initializes your git repository locally
-   RStudio will switch to that the new project

# Hello RStudio!

RStudio is comprised of four panes.

![](img/rstudio-anatomy.png)

-   On the bottom left is the Console which we already used, this is where you can write code that will be evaluated. Try typing `2 + 2` here and hit enter, what do you get?
-   On the bottom right is the Files pane, as well as other panes that will come handy as we start our analysis.
-   If you click on a file, it will open in the editor, on the top left pane.
-   Finally, the top right pane shows your Environment. If you define a variable it would show up there. Try typing `x <- 2` in the Console and hit enter, what do you get in the **Environment** pane? Importantly, this pane is also where the **Git** interface lives. We will be using that regularly throughout this assignment.

# Warm up

Before we introduce the data, let's warm up with some simple exercises.

::: callout-note
The top portion of your R Markdown file (between the three dashed lines) is called **YAML**.
It stands for "YAML Ain't Markup Language".
It is a human friendly data serialization standard for all programming languages.
All you need to know is that this area is called the YAML (we will refer to it as such) and that it contains meta information about your document.
:::

## Step 1. Update the YAML

Open the quarto (qmd) file in your project, change the author name to your name, and "Render" the document.

![](img/quarto-render.png) This calls `quarto`, and quarto renders the document.
In this case, that means, quarto creates a new file "hw-01-R.md" in the gfm format as specified in the YAML.
GFM stands for *GitHub Flavored Markdown* which is a markdown document which can be nicely shown on <https://github.com>.

When the file was rendered successfully, RStudio shows it in the "Viewer" pane at the bottom right.
At the same place you can look in the "Files" pane you can check if the file is there.

::: callout.important
If you do not find the "Render" button in your RStudio installation, then either quarto is not installed or RStudio has not recognized.
You have to fix this issue first before you can continue. Another source of error while rendering could be that you haven't installed the `tidyverse` package. 
:::

## Step 2: Commit

Go to the **Git pane** in your RStudio (top right corner).

You should see that your qmd (quarto) file and its output, your md file (Markdown), are listed there as recently changed files.

Next, click on **Diff**.
This will pop open a new window that shows you the **diff**erence between the last committed state of the document and its current state that includes your changes.
(Click on the file "hw-01-R.qmd".) If you're happy with these changes, click on the checkboxes of all files in the list, and type *"Update author name"* in the **Commit message** box and hit **Commit** and then close the window.

![](img/commit-window.png)

You don't have to commit after every change, this would get quite cumbersome.
You should consider committing states that are *meaningful to you* for inspection, comparison, or restoration.
In the first few assignments we may tell you exactly when to commit and what commit message to use.
As the semester progresses we will let you make these decisions.

## Step 3. Push

Now that you have made an update and committed this change, it's time to push these changes to the web!
Or more specifically, to your repo on GitHub.
Why?
So that others can see your changes.
And by others, we mean the course instructors (your repos in this course are private to you and us, only).

Go the Git pane and click on **Push**. 

**Thought exercise:** Which of the steps "updating the YAML", "committing", and "pushing" involves talking to GitHub?[^1]


## Check what you did

Go to your repository on <https://github.com/JU-F22-MDSSB-MET-01> and click on the file "hw-01-R.md". You should see a nicely rendered version with your name in the header. 

# Packages

R is an open-source language, and developers contribute functionality to R via packages.

In this assignment we will use the following packages **tidyverse**, a collection of packages for doing data analysis in a "tidy" way. 

We use the `library()` function to load packages.

We use the function `read_csv` from the tidyverse package `readr` to read the data in the csv-file "data/ourdatascienceprofiles.csv" which we produced during the first lecture. 

In your R Markdown document you should see an R chunk labelled `load-packages-and-data` which has the necessary code for loading packages and data.

You should also load these packages in your Console, which you can do by sending the code to your Console by clicking on the **Run Current Chunk** icon (small green triangle pointing right icon).

![](img/run-chunk.png)

# Data

The dataset is now visible under the name `profiles` in your Environment pane (top right area). 
You can view the dataset as a spreadsheet using the `View()` function.

Note that you should not put this function in your R Markdown document, but instead type it directly in the Console, as it pops open a new window (and the concept of popping open a window in a static document doesn't really make sense...).

When you run this in the console, you'll see the **data viewer** window pop up. You can also write the object name `profiles` to the console and get a brief outlook of the data, or you can take a glimpse to get meta-information about dimensions, variable names, and data types. Try all in the Console. 

```R
View(profiles)
profiles
glimpse(profiles)
```

# Graphic

There is another chunk called `my-data-science-profile`. It has code which 

* tidies the data by making it longer and less wide such that the data from the seven dimensions, go to two variables "Dimension" and "value".
* filters the data of one person
* makes a graphic which is called a barplot of the data science profile of that person

Run the code in this chunk in the Console and see how the Plots pane pops up to show the graphic. 

# Exercises

1.  Show your data science profile!

::: callout-tip
*Change the code in the `my-data-science-profile` chunk such that it shows your profile. Render the document, commit your changes with a commit message that says "Completed Exercise 1", and push to GitHub. Make sure to commit and push all changed files so that your Git pane is cleared up afterwards.*
::: 

::: callout-note
If you haven't entered your data during class, then use the name of another person in the dataset. If you want to have your data included then you can still fill out the survey (find the link on jMoodle). You can also fill out the survey once again, if you are totally unhappy with yooour data. I will update the dataset later and inform you when it is ready. For now you have to choose another name.
:::

2.  Write a short text about your data science profile going through the dimensions and tell what is behind that value. 

::: callout-tip
*Write your text under the `my-data-science-profile` chunk. Format some words in bold or italic, e.g., the dimension names. You can find the formatting basic of markdown in quarto here: <https://quarto.org/docs/authoring/markdown-basics.html>. Render the document, commit with message "Completed Exercise 2", and push. You can check on GitHub if the file "hw-01-R.md" looks good in the browser.*
::: 

3.  Averaging over all people, what is the Dimension with the most and the least experience in the group? 

::: callout-tip
*Copy this code to your Console and read the output:*

```R
profiles |> 
  summarize(across(`Social Science`:`Machine Learning`, mean))
```

*Copy the code and write your answer into the outlined places in the document.*
::: 

4. How many in the group work on Windows, Mac, and Linux?

::: callout-tip
*Copy this code to your Console and read the output:*

```R
profiles |> 
  group_by(`What is the operating system of your computer?`) |> 
  count()
```

*Copy the code and write your answer into the outlined places in the document.*

*Render the document, commit with message "Completed up to Exercise 4", and push. Check on GitHub that the file "hw-01-R.md" looks good in the browser.*
::: 


5. Make a new quarto document called "hw-01-python.qmd". Copy the content from the file "hw-01-R.md" into it. In all four chunks replace `{r` with `{python` (this makes the chunks python chunks). Remove the code in the chunk and write python-code which achieves essentially the same results. Commit and push this document, too. (Commit message: "Completed.")

::: callout-tip
*This is a translation exercise. You will get an introduction in the course "Data Science with python".*
::: 

 
[^1]: Only the push talks to GitHub.
    Editing and committing happens on your local machine.



