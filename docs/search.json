[
  {
    "objectID": "late.html",
    "href": "late.html",
    "title": "Info for late coming students",
    "section": "",
    "text": "We know there are reasons for coming late which may not lie in your hands. We try to help you to get into the course in this situation. The following checklist should guide you.\n\nCheck list for late coming students\n\nRead this Syllabus\nMost urgent\n\n\nLook at slides 30 to 32 of the Week 1: https://docs.google.com/presentation/d/1GyEClkRDo5aOKuHeOZxgvz2uqo_x5t-c1CQ-ksGXTq0/edit#slide=id.g14992662fb0_0_115 and start to build your data science toolkit on your computer.\nPart of it is that you should submit your GitHub-username in a Google Form. To speed up thing, also send your GitHub-username to Jan Lorenz via Teams!\n\n\nWork through the materials of the Sessions you have missed.\n\n\nYou find the materials in the Section “Course Material and Schedule” at the end of the syllabus.\nThere are links to the slides.\nOn MS Teams you find recordings in the Team F22_MDSSB-DSOC-02_Data Science Concepts in the General Channel -> Files -> Recordings\n\n\nDo the Homework you have missed even if you are beyond the deadline. You find the Homework instructions on this website. Homework 01 introduces you to the workflow needed for further Homework.\nVisit the next lectures in Data Science Concepts and the sessions in the two Data Science Tools course. When you cannot be there in person visit via Teams. Meetings will be started in the General Channel when the course starts.\nWhen you get stuck or lost, ask your fellow students or contact us!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science Concepts / Tools",
    "section": "",
    "text": "Information for late coming students\n\n\n\nWelcome! You are in the right place to get into the course. There is a lot of material. Here we provide a checklist for late coming students"
  },
  {
    "objectID": "index.html#modules-data-science-concepts-methods",
    "href": "index.html#modules-data-science-concepts-methods",
    "title": "Data Science Concepts / Tools",
    "section": "1.1 Modules Data Science Concepts / Methods",
    "text": "1.1 Modules Data Science Concepts / Methods\nThese two modules are orchestrated in close cooperation\n\nData Science Concepts (Core module: MSDSSB-DSOC-02)\nData Science Tools (Methods module: MDSSB-MET-01)\n\nYou should know how the courses are integrated in the overall Master program and the module descriptions from the DSSB Handbook."
  },
  {
    "objectID": "index.html#courses-and-instructors",
    "href": "index.html#courses-and-instructors",
    "title": "Data Science Concepts / Tools",
    "section": "1.2 Courses and Instructors",
    "text": "1.2 Courses and Instructors\nThursday is the concepts and tools day!\nData Science Tools in R: Thursday 9:45 - 11:00 Armin Müller\nData Science Tools in Python: Thursday 11:15 - 12:30 Martin Gestefeld\nData Science Concepts Lectures: Thursday 14:15 - 17:00 (2 Sessions) Jan Lorenz"
  },
  {
    "objectID": "index.html#goal",
    "href": "index.html#goal",
    "title": "Data Science Concepts / Tools",
    "section": "1.3 Goal",
    "text": "1.3 Goal\nOur goal in the two modules is to enable you to\n\ncreate and maintain a digital working environment on your computer to do data science\nlearn core concepts in data science, that means\n\nlearn concepts to explore data (visualize, import, wrangle)\nlearn or refresh some mathematics and statistics concepts through the data science lens\nlearn concepts to model and draw conclusions from data (model, infer, predict)\n\nlearn to program in the data science languages R and python, and become able to learn new skills in these independently\ndo a data science project of your own interest\n\nYou can build a good basis for your more and more independent the work in the whole program."
  },
  {
    "objectID": "index.html#expectations-for-students",
    "href": "index.html#expectations-for-students",
    "title": "Data Science Concepts / Tools",
    "section": "1.4 Expectations for students",
    "text": "1.4 Expectations for students\nWe rely on your engagement. Taken holistically, engagement is many-faceted and includes\n\nPreparation (looking at readings and material before class, being informed about syllabus and course material)\nFocus (avoid distraction during in class and online activities)\nPresence (listening and responding during group activities)\nAsking questions (in class, out of class, online, offline)\nSpecificity (being specific when referring to ideas from readings and discussions)\nSynthesizing (making connections between concepts from reading and discussion)\n\n(Adapted from Twitter: Mark Sample)"
  },
  {
    "objectID": "index.html#online-infrastructure",
    "href": "index.html#online-infrastructure",
    "title": "Data Science Concepts / Tools",
    "section": "1.5 Online Infrastructure",
    "text": "1.5 Online Infrastructure\nCampusnet This is the official registration site. Besides the final grade input for the modules we will not use it in the courses, but you should be able to get back to this site from there once you are lost.\njMoodle An e-learning platform provided by Jacobs University. Log in with your campusnet credentials. Under the Data Science Concepts Course (identifier MDSSB-DSOC-02_f2022_1) we publish information (e.g. survey links) which shall be shared only among participants of the course. (After all this is a public website, although it is not intended to be announced publicly.)\n\n\n\n\n\n\nImportant\n\n\n\nTest to log in and visit the Data Science Concepts course on jMoodle. Be prepared to go there during class!\n\n\nMicrosoft Teams: In MS Teams there is a Team for the course. Teams will be used for hybrid online and in class teaching. It is expected that you come to class in presence if possible. Participation should only be online when abroad or CoViD-isolated at home. The “General” channel can be used for announcements. You can also post there. You can also post to me directly over Teams and hope for a quick answer.\nGitHub: All delivery and submission of homework is via Github. Details in the lecture slides of week 1 and “Homework 01” (on this page)."
  },
  {
    "objectID": "index.html#software",
    "href": "index.html#software",
    "title": "Data Science Concepts / Tools",
    "section": "1.6 Software",
    "text": "1.6 Software\nWe use a mandatory set of software. Details are in the slides of week 1. Our task with highest priority is to realize that everyone has full installation and functionality on their local machines. All software is freely available software."
  },
  {
    "objectID": "index.html#grading",
    "href": "index.html#grading",
    "title": "Data Science Concepts / Tools",
    "section": "1.7 Grading",
    "text": "1.7 Grading\nThis will be updated and made more specific later.\nData Science Concepts: Grading is based on an exam of 120 minutes.\nData Science Tools: Grading is based on team project of approximately 4000-5000 words. As a requirement, enough homework assignment tasks need to be correctly solved. These do not determine the grade, but can improve it. See handbook for details."
  },
  {
    "objectID": "index.html#week-1-sep-1-what-is-data-science-course-organization-toolkit",
    "href": "index.html#week-1-sep-1-what-is-data-science-course-organization-toolkit",
    "title": "Data Science Concepts / Tools",
    "section": "Week 1, Sep 1: What is Data Science? Course organization, toolkit",
    "text": "Week 1, Sep 1: What is Data Science? Course organization, toolkit\nSlides Week 1\nFind the homework assignment “Homework 01” on this website. Deadline: Sunday, Sep 18. The content will be discussed in the Tools course in Week 2 and 3"
  },
  {
    "objectID": "index.html#week-2-sep-8-no-lectures",
    "href": "index.html#week-2-sep-8-no-lectures",
    "title": "Data Science Concepts / Tools",
    "section": "Week 2, Sep 8: No lectures",
    "text": "Week 2, Sep 8: No lectures\nThere will be no lectures, because of a mandatory central events!\nThe first Data Science Tools courses in the morning will take place!\nReading instead of lecture: R for Data Science: Chapter 3 on Data Visualization"
  },
  {
    "objectID": "index.html#week-3-sep-15-data-visualization-data-formats",
    "href": "index.html#week-3-sep-15-data-visualization-data-formats",
    "title": "Data Science Concepts / Tools",
    "section": "Week 3, Sep 15: Data visualization, Data formats",
    "text": "Week 3, Sep 15: Data visualization, Data formats\nSlides Week 3\nLab work on code. Clone from: https://github.com/JU-F22-MDSSB-MET-01/codebase-janlorenz.git In RStudio, work through\n\n2022-09-15_ggplot_and_pipe.R\n2022-09-15_profiles.qmd"
  },
  {
    "objectID": "W4.html#feedback-on-homework-01",
    "href": "W4.html#feedback-on-homework-01",
    "title": "W#4 Data import, data wrangling",
    "section": "Feedback on Homework 01",
    "text": "Feedback on Homework 01\nSome of you did not modify the line\n“The dimension with the most experience is … The dimension with the least experience is …”\nor did not replace the line\n“Remove this text and write you answer to Exercise 4.”\nwith your text.\nYou did the programming right, but forgot the textual part. Now, this doesn’t matter. However, the learning goal was not only programming, but also taking care that the rendered output communicates your work well."
  },
  {
    "objectID": "W4.html#programming-languages",
    "href": "W4.html#programming-languages",
    "title": "W#4 Data import, data wrangling",
    "section": "Programming languages",
    "text": "Programming languages\nSystems of rules which can process instructions to be executed by the computer.\nOur programming languages are:\n\n   \n\n\n\n\nIn R with function:\ndo_this(to_this)\ndo_that(to_this, with_those)\nto_this |> do_this() |> do_that(with_those) \nstore <- do_that(to_this)\n\nIn python:\nto_this.do_this()\nto_this.do_this(with_those)\nto_this.do_this().do_that(with_those)\nstore = do_that(to_this)\n\n\nWe can use R and python in a standard terminal (write R or python3) and write scripts with any editor (Wordpad)."
  },
  {
    "objectID": "W4.html#integrated-development-environment-ide",
    "href": "W4.html#integrated-development-environment-ide",
    "title": "W#4 Data Wrangling",
    "section": "Integrated development environment (IDE)",
    "text": "Integrated development environment (IDE)\nProvides terminals, a source code editor, an object browser, output and help view, tools for rendering and version control, and more to help in the workflow. Our IDEs are:\n\n    VS Code\n\n\nEditors delight us with\n\nsyntax highlighting Then we see if code looks good\n\n\nc(10,\"Text\",TRUE)\n\n\ncode completion Start writing, and press Tab to see options\nautomatic indentation, brace matching, keyboard shortcuts, …"
  },
  {
    "objectID": "W4.html#data-types-statistics",
    "href": "W4.html#data-types-statistics",
    "title": "W#4 Data Wrangling",
    "section": "Data Types Statistics",
    "text": "Data Types Statistics\nNumerical\n\nRation\nInterval\n\nCategorical"
  },
  {
    "objectID": "W4.html#factors",
    "href": "W4.html#factors",
    "title": "W#4 Data Wrangling",
    "section": "Factors",
    "text": "Factors"
  },
  {
    "objectID": "W4.html#data-import",
    "href": "W4.html#data-import",
    "title": "W#4 Data Wrangling",
    "section": "Data Import",
    "text": "Data Import"
  },
  {
    "objectID": "W4.html#data-wrangling",
    "href": "W4.html#data-wrangling",
    "title": "W#4 Data Wrangling",
    "section": "Data Wrangling",
    "text": "Data Wrangling\nGrammar of Data Wrangling from datasciencebox"
  },
  {
    "objectID": "W4.html#data-transformation",
    "href": "W4.html#data-transformation",
    "title": "W#4 Data Wrangling",
    "section": "Data Transformation",
    "text": "Data Transformation"
  },
  {
    "objectID": "W4.html#missing-values",
    "href": "W4.html#missing-values",
    "title": "W#4 Data Wrangling",
    "section": "Missing values",
    "text": "Missing values"
  },
  {
    "objectID": "W4.html#filtering",
    "href": "W4.html#filtering",
    "title": "W#4 Data Wrangling",
    "section": "Filtering",
    "text": "Filtering"
  },
  {
    "objectID": "W4.html#select-and-rename",
    "href": "W4.html#select-and-rename",
    "title": "W#4 Data Wrangling",
    "section": "Select and rename",
    "text": "Select and rename"
  },
  {
    "objectID": "W4.html#joining-data-frames",
    "href": "W4.html#joining-data-frames",
    "title": "W#4 Data Wrangling",
    "section": "Joining data frames",
    "text": "Joining data frames\n\n\n\nJU-F22-MDSSB-DSCO-02: Data Science Concepts"
  },
  {
    "objectID": "hw-instructions/hw-01-instr.html",
    "href": "hw-instructions/hw-01-instr.html",
    "title": "Homework 01",
    "section": "",
    "text": "Note\n\n\n\nUpdated Sep 7, 2022 to prevent problems with cloning your repository.\nSep 9, 2022: Updated the individual repositories on with an updated dataset. All which have already cloned it should do a “Pull” in the Git tab of RStudio.\nThe goal of this assignment is to introduce you to R, RStudio, Git, and GitHub, which you’ll be using throughout the course both to learn the data science concepts discussed in the course and to analyze real data and come to informed conclusions."
  },
  {
    "objectID": "hw-instructions/hw-01-instr.html#prerequisites",
    "href": "hw-instructions/hw-01-instr.html#prerequisites",
    "title": "Homework 01",
    "section": "1.1 Prerequisites",
    "text": "1.1 Prerequisites\nThis assignment assumes that you have reviewed the lectures of week 1 and checked all boxes on the Prerequisites Checklist."
  },
  {
    "objectID": "hw-instructions/hw-01-instr.html#terminology",
    "href": "hw-instructions/hw-01-instr.html#terminology",
    "title": "Homework 01",
    "section": "1.2 Terminology",
    "text": "1.2 Terminology\nWe’ve already thrown around a few new terms, so let’s define them before we proceed.\n\nR and python: Names of the programming language we will be using throughout the course.\nRStudio: An integrated development environment developed for R, which can also work with python. In other words, a convenient interface for writing and running code.\nGit: A version control system.\nGitHub: A web platform for hosting version controlled files and facilitating collaboration among users.\nRepository: A Git repository contains all of your project’s files and stores each file’s revision history.\n\nIt’s common to refer to a repository as a repo.\n\nIn this course, each assignment you work on will be contained in a Git repo.\nFor individual assignments, only you will have access to the repo. For team assignments, all team members will have access to a single repo where they work collaboratively.\nAll repos associated with this course are housed in the course GitHub organization. The organization is set up such that students can only see repos they have access to, but the course instructors can see all of them."
  },
  {
    "objectID": "hw-instructions/hw-01-instr.html#starting-slowly-step-by-step",
    "href": "hw-instructions/hw-01-instr.html#starting-slowly-step-by-step",
    "title": "Homework 01",
    "section": "1.3 Starting slowly step by step",
    "text": "1.3 Starting slowly step by step\nAs the course progresses, you are encouraged to explore beyond what the assignments dictate; a willingness to experiment will make you a much better programmer! Before we get to that stage, however, you need to build some basic fluency in the tools and the workflow we use. First, we will explore the fundamental building blocks of all of these tools.\nBefore you can get started with the analysis, you need to make sure you:\n\nhave a GitHub account\nare a member of the course GitHub organization https://github.com/JU-F22-MDSSB-MET-01\nhave the needed software stack installation on your local machine (see the Prerequisites Checklist in the slides of the Week 1 lectures.)\n\nIf you failed to confirm any of these, it means you have not yet completed the prerequisites for this assignment. Please go back to Prerequisites and complete them before continuing the assignment."
  },
  {
    "objectID": "hw-instructions/hw-01-instr.html#step-0.-authenticate-git-to-access-your-github-content",
    "href": "hw-instructions/hw-01-instr.html#step-0.-authenticate-git-to-access-your-github-content",
    "title": "Homework 01",
    "section": "2.1 Step 0. Authenticate git to access your GitHub content",
    "text": "2.1 Step 0. Authenticate git to access your GitHub content\nBefore you can clone your repository you need to tell GitHub that you are authorized to do this, and to that end you need to make a Personal Access Token (PAT) in your GitHub account and make this available to git and RStudio on your local machine.\nThere are several ways to do this (e.g. from the command line) but as we will use RStudio anyway, we can use a convenient way provided there.\nRead more about PATs and how to use them in “Happy Git with R” Chapter 9 https://happygitwithr.com/https-pat.html (in particular the TL;DR which describes what we use).\nOpen RStudio and install the packages usethis and gitcreds if you haven’t done already: Go to the “Console” pane at the bottom left. Type in\ninstall.packages(c(\"usethis\",\"gitcreds\"))\nand hit Enter. Now the packages should be installed.\nNow, use two commands. Copy them to the console and click Enter:\nusethis::create_github_token()\nThis opens http://github.com and you may need to log in. Then you can make the PAT (read more details in “Happy Git with R”). For today, you can go the fast way and do not think about the options and click “Generate token”. Use the clipboard icon 📋 to copy the PAT. Go back to RStudio and do in the console:\ngitcreds::gitcreds_set()\nIn the dialog in the console paste your PAT from the clipboard and press Enter. That should be it and you do not need to repeat these steps until the PAT expires. (If the PAT expires you have to make a new one in the same way.)"
  },
  {
    "objectID": "hw-instructions/hw-01-instr.html#step-1.-get-url-of-repo-to-be-cloned",
    "href": "hw-instructions/hw-01-instr.html#step-1.-get-url-of-repo-to-be-cloned",
    "title": "Homework 01",
    "section": "2.2 Step 1. Get URL of repo to be cloned",
    "text": "2.2 Step 1. Get URL of repo to be cloned\nOn GitHub https://github.com/JU-F22-MDSSB-MET-01, open your repository for Homework 1.\n\nOn GitHub, click on the green Code button, select HTTPS (this might already be selected by default, and if it is, you’ll see the text Use Git or checkout with SVN using the web URL). Click on the clipboard icon 📋 to copy the repo URL."
  },
  {
    "objectID": "hw-instructions/hw-01-instr.html#step-2.-go-to-rstudio",
    "href": "hw-instructions/hw-01-instr.html#step-2.-go-to-rstudio",
    "title": "Homework 01",
    "section": "2.3 Step 2. Go to RStudio",
    "text": "2.3 Step 2. Go to RStudio\nGo to your RStudio. Select “New Project…” either from the File menu or from the special project menu on the top right of the RStudio window.\n\nIn the New Project Wizard, click on “Version Control” and then “Git”.\n\n\n\n\n\n\nImportant\n\n\n\nIf “Version Control” or “Git” is not available in your RStudio, then either you haven’t installed git on you computer or your RStudio installation has not recognized it properly. In a correct installation RStudio would recognize git on your machine when started and makes the options available automatically. You have to solve this issue first to continue.\n\n\nThen paste the repositories URL (which should still be in your clipboard) into the “Repository URL:” field. Leave directory name as it is automatically chosen, but make sure that you create the directory in a the folder where you want to store the course material on your computer via the “Browse …” button.\nWhen you click “Create Project”\n\ngit will create a new directory in the folder, copies all the files from github to it, and initializes your git repository locally\nRStudio will switch to that the new project"
  },
  {
    "objectID": "hw-instructions/hw-01-instr.html#step-1.-update-the-yaml",
    "href": "hw-instructions/hw-01-instr.html#step-1.-update-the-yaml",
    "title": "Homework 01",
    "section": "4.1 Step 1. Update the YAML",
    "text": "4.1 Step 1. Update the YAML\nOpen the quarto (qmd) file in your project, change the author name to your name, and “Render” the document.\n This calls quarto, and quarto renders the document. In this case, that means, quarto creates a new file “hw-01-R.md” in the gfm format as specified in the YAML. GFM stands for GitHub Flavored Markdown which is a markdown document which can be nicely shown on https://github.com.\nWhen the file was rendered successfully, RStudio shows it in the “Viewer” pane at the bottom right. At the same place you can look in the “Files” pane you can check if the file is there.\n\nIf you do not find the “Render” button in your RStudio installation, then either quarto is not installed or RStudio has not recognized. You have to fix this issue first before you can continue. Another source of error while rendering could be that you haven’t installed the tidyverse package."
  },
  {
    "objectID": "hw-instructions/hw-01-instr.html#step-2-commit",
    "href": "hw-instructions/hw-01-instr.html#step-2-commit",
    "title": "Homework 01",
    "section": "4.2 Step 2: Commit",
    "text": "4.2 Step 2: Commit\nGo to the Git pane in your RStudio (top right corner).\nYou should see that your qmd (quarto) file and its output, your md file (Markdown), are listed there as recently changed files.\nNext, click on Diff. This will pop open a new window that shows you the difference between the last committed state of the document and its current state that includes your changes. (Click on the file “hw-01-R.qmd”.) If you’re happy with these changes, click on the checkboxes of all files in the list, and type “Update author name” in the Commit message box and hit Commit and then close the window.\n\nYou don’t have to commit after every change, this would get quite cumbersome. You should consider committing states that are meaningful to you for inspection, comparison, or restoration. In the first few assignments we may tell you exactly when to commit and what commit message to use. As the semester progresses we will let you make these decisions."
  },
  {
    "objectID": "hw-instructions/hw-01-instr.html#step-3.-push",
    "href": "hw-instructions/hw-01-instr.html#step-3.-push",
    "title": "Homework 01",
    "section": "4.3 Step 3. Push",
    "text": "4.3 Step 3. Push\nNow that you have made an update and committed this change, it’s time to push these changes to the web! Or more specifically, to your repo on GitHub. Why? So that others can see your changes. And by others, we mean the course instructors (your repos in this course are private to you and us, only).\nGo the Git pane and click on Push.\nThought exercise: Which of the steps “updating the YAML”, “committing”, and “pushing” involves talking to GitHub?1"
  },
  {
    "objectID": "hw-instructions/hw-01-instr.html#check-what-you-did",
    "href": "hw-instructions/hw-01-instr.html#check-what-you-did",
    "title": "Homework 01",
    "section": "4.4 Check what you did",
    "text": "4.4 Check what you did\nGo to your repository on https://github.com/JU-F22-MDSSB-MET-01 and click on the file “hw-01-R.md”. You should see a nicely rendered version with your name in the header."
  },
  {
    "objectID": "hw-instructions/hw-02-instr.html",
    "href": "hw-instructions/hw-02-instr.html",
    "title": "Homework 02",
    "section": "",
    "text": "The goals of this assignment are\nTo that end, we provide three repositories with starter documents which you should clone and push your solutions to:"
  },
  {
    "objectID": "hw-instructions/hw-02-instr.html#data-overview",
    "href": "hw-instructions/hw-02-instr.html#data-overview",
    "title": "Homework 02",
    "section": "1.1 Data overview",
    "text": "1.1 Data overview\n\n\n\n\n\n\nNote\n\n\n\nFirst do the following exercises in R in hw-02-R.qmd. Afterwards go through hw-02-py.qmd. This documents contains some tips how to do the same operations in python. Exercises which are not about coding are omitted there.\n\n\n\nRun the first chunk packages-data such that the lines are executed in the console to load the tidyverse functions and the ny3cflight13 data. See which dataframes are available in the Environment tab. The environment should be empty, but you can select “package:nycflights13” instead of “Global Environment” and you see values markes as <Promise>. Once you click on one or call it in the Console you see basic information there.\nReplace the “??” in the text with the actual numbers. Don’t write the numbers your self, but write inline code in which you output the number of rows of each data frame. In the document this already done for the airlines. Render the document to see if it works. More information https://quarto.org/docs/get-started/computations/rstudio.html#inline-code\nExplore the datasets. Write View(flights) in the Console to see the data as a spreadsheet. Write glimpse(flight) to see an overview of all variables, their types and first values. As these dataframes come from a package there is also a Help page for each dataframe which you access with ?flights. There you find short descriptions about each variable.\n\nWrite a nicely formatted short description about the variables origin, arr_delay, and dep_delay from flights and engine and seat from planes."
  },
  {
    "objectID": "hw-instructions/hw-02-instr.html#data-visualizations",
    "href": "hw-instructions/hw-02-instr.html#data-visualizations",
    "title": "Homework 02",
    "section": "1.2 Data visualizations",
    "text": "1.2 Data visualizations\n\nWe first want to know the distribution of values of the categorical variable origin in flights. To that end, make a bar chart. Read the Help ?geom_bar and decide if you need to use geom_bar or geom_col. You can use the template below. Write your solution in the chunk flightsorigin. Test your line by sending it to the Console (with Ctrl + Enter). Once you are satisfied, render the document, commit the changes with message “First Visualization!” and push it. In the following, you can commit and push when you want. (Note, that we can provide help directly in your repo when you commit and push before.) This is the template.\n\nggplot(data = __________, mapping = aes(x = ________)) + \n  geom_TOSELECT()\n\nNow, we want to know the distribution of values of the numerical variable distance in flights. A common visualization is a histogram. Use geom-histogram with the same template, write the solution in the chunk flightsdistance, and test it. Notice, the red comment in the console. It advises to specify a binwidth. Test binwidth = 5, binwidth = 50, and binwidth = 500 in geom_histogram, notice the difference (consult ?geom_histogram) for details, and decide which shows the distribution best.\nIn chunk distributions you see two ways to visualize the distribution of the number of seats in airplanes - points for each observation and a boxplot. (Read ?geom_boxplot for more information). Note, that there are three ggplot objects (g1, g2, g3) which are shown combined with g1 + g2 + g3 (using the patchwork package). Make the empty g3 into a vertical histogram for the same data following the exercise before. Hint: For the vertical histogram assign distance to the y aesthetic and leave out the x aesthetic. Think about the advantages and disadvantages of each visualization.\nNow, we make the first plot which visualizes two variables, the categorical variable engine, and the numerical variable seats in airplanes. Use the template and with aesthetics x and y and the geom_boxplot and put the solution into the chunk engine-seats\nTwo numerical variables can be visualized with a scatter plot using geom_point and the aesthetics x and y. Let us look at dep_delay and arr_delay of flights. Warning: The flights is very large! So, do not use flights in data = _____ but a random sample of 10,000 flights sample_n(flights, 10000). Now, let us add information about the categorical variable origin and assign it to the color aesthetic. Put your solution into the chunk delays. Test your solution several times and observe the changes in the visualization because of the random sampling. In which region are the changes most substantial? (This is a qualitative judgment.)\nFinally, let us visualize the location of airports as points at their longitude and latitude (look up the variable names) and color them with the timezone tzone they are in. Put the solution into the chunk airportlocations."
  },
  {
    "objectID": "hw-instructions/hw-02-instr.html#data-wrangling-pipes-and-visualization",
    "href": "hw-instructions/hw-02-instr.html#data-wrangling-pipes-and-visualization",
    "title": "Homework 02",
    "section": "1.3 Data wrangling, pipes, and visualization",
    "text": "1.3 Data wrangling, pipes, and visualization\nIn the following, you have to solve some data wrangling tasks. For data wrangling, the usage of the pipe, or a chain of pipes, is convenient. You can also use the pipe to finish with a visualization.\n\nPut the code snippet below into the chunk flightsaveragespeed and test it. The mutate line makes a new variable called speed which is the distance of the flight divided by the time in the air. The select line selects variables from the dataset. In this case, it selects air_time as the first, distance as the second, and the new speed as the third variable. All other variables are dropped.\nThe values in the new speed variable do not look like speeds of airplanes in km/h. Why? Because they are in miles/minute which we know from the variable descriptions. Modify the equation in the mutate command such that the values are in km/h. To that end, you have to divide air time by 60 and multiply distance by a certain factor. Look up the factor. Be careful with the order of mathematical operations and maybe use brackets (). Test your computation. Are the speed values reasonable?\nNow, make a histogram of speed. Add another pipe after the select statement and write ggplot(mapping = aes()) in the next line. Note, that you should not put data = flights into the argument of ggplot()! It is the mission of the pipe to do this. Fill out the aes() command accordingly, and add the geom for a histogram.\n\nflights |> \n  mutate(speed = distance / air_time ) |> \n  select(air_time, distance, speed)\n\nPractice filter operations, which subsets certain observations of a dataframe. Write a line which filters the flights which\n\n\nhad an arrival delay of two or more hours\nflew to Houston (IAH or HOU)\narrived more than two hours late, but didn’t leave late\nstarted with a delay of at least an hour, but made up over 30 minutes in flight. Put all four lines into the chunk filtering.\n\n\nAnother common operation is summarizing data. Put the code below into the chunk summarizing and test it. You see the average delay at departure. (See ?mean to learn what na.rm = TRUE is doing). Now, we want to know the average delay at departue for each of the three airports of origin. This is done with a group_by applied to the flights. Find out how and modify the code in the chunk accordingly.\n\nflights |> \n  summarize(mean_dep_deplay = mean(dep_delay, na.rm = TRUE))\n\nFinally, look at the plot of airportlocations. The airport locations show the shape of the United States of America, but there are four airports on the right hand side which do not fit that pattern. Filter airports such that you only see these four airport. Write your solution into the chunk stangeairportlocations. Check with internet research where these airports are located. Why are the locations from the data as they are? List your hypotheses for each airport under the chunk."
  },
  {
    "objectID": "hw-instructions/hw-02-py-instruction.html",
    "href": "hw-instructions/hw-02-py-instruction.html",
    "title": "Additional python instruction Homework 02",
    "section": "",
    "text": "Read and do the homework in R first. There you find more instructions and exercises.\nYou can also copy each chunk into a notebook cell within jupyter notebook template file and work with the .ipynb file\nquarto can also render .ipynb files. (Actually quarto converts .qmd files into .ipynb files and renders them afterwards)\nThere is also a .ipynb Template in the python Codebase provided.\n\nThis analysis works with datasets in the package nycflights13 about flights, specifically a sample of domestic flights that departed from the three major New York City airport in 2013.\n\n1 Data overview\n#| label: packages-data\n#| message: false  # We do not want to see the common tidyverse message in our document\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom nycflights13 import flights, planes,airports\nRun the first chunk to import the packages, by running the command as:\n\nfrom nycflights import …\n\nYou can deliberately choose which dataset you want to import from nycflights13. The nameing convension seems to be identical with the dataset in R.\n#| output: false\nflights.info()\nExplore the datasets. If you are running the code in VSCode you can see the variable in the “JUPYTER: VARIABLES” window. Write flights.info() in the Console or in a chunk and remove it afterwards to see an overview of all variables, their types. (Write a short note about the differences to the R glimpse command)\n\n\n2 Whats the differences between R:glimpse and pandas:info\n…\n\n\n3 Data visualization\n\nWe first want to know the distribution of values of the categorical variable origin in flights. To that end, make a bar chart. Use the seaborn command displot.\n\n\nsns.displot(data=flights,x = .. y= ..,height=.., aspect=..)\ngeom_bar or geom_col is just a variation between the usage of variable x and y. Use height=.., aspect=.. to adjust the size of the plot.\n\nNow, we want to know the distribution of values of the numerical variable distance in flights. A common visualization is a histogram. Use sns.histplot with the same template, write the solution in the chunk flightsdistance, and test it. The command binwidth is equivalent to bin-width in R. Use it inside the seaborn function.\n\nfig,ax = plt.subplots(figsize=(12,6)) is used to vary the size of the plot.\nfig,ax = plt.subplots(figsize=(12,6))\nsns.histplot(data=flights,x='distance',ax=ax, ...)\nIn chunk distributions you see two ways to visualize the distribution of the number of seats in airplanes - points for each observation and a boxplot. Different to ggplot you define the output first. With ncols= .. ,nrows =.. you specify the layout and access it with  ax  similar to an array.\n#| label: distributions\nfig,ax = plt.subplots(nrows=1,ncols=3,figsize=(8,6))\n#fig,[ax1,ax2,ax3] = plt.subplots(nrows=1,ncols=3,figsize=(24,12)) ## Or define the array elements\nax[0].plot(np.zeros(len(planes)),planes['seats'],'k.')\nsns.boxplot(data=planes,y='seats',\n    boxprops={'facecolor':'None'},\n    ax=ax[1])\n#sns.boxplot(data=planes\n    #boxprops={'facecolor':'None'},\n    #ax=..)\n    # )\nNow, we make the first plot in python which visualizes two variables, the categorical variable engine, and the numerical variable seats in airplanes\n#| label: engine-seats\nfig,ax = plt.subplots(figsize=(24,12))\n\nsns.boxplot(data=planes,x = .. , y = ..\n    boxprops={'facecolor':'None'},\n    ax=ax)\nSo, do not use flights in data = .. but a random sample of 10,000 flights flights.sample(n=10000). To visualize a scatterplot use sns.scatterplot(). To add an information about the categorical variable origin and assign it to the color aesthetica variation, include  ..,hue= .. , in the scatterplot command.\n#| label: delays\nfig,ax = plt.subplots(figsize=(12,10))\nsns.scatterplot(data= flights.., x='dep_delay',y='arr_delay',..,ax=ax)\nFinally, let us visualize the location of airports as points at their longitude and latitude (look up the variable names) and color them with the timezone tzone they are in. Put the solution into the chunk airportlocations.\n#| label: airportlocations\nfig,ax = plt.subplots(figsize=(12,10))\nsns.scatterplot()\n\n\n4 Data Wrangling\nIn the following, you have to solve some data wrangling tasks. For data wrangling, you use different commands onto a DataFrame devided by a “.” . There is not equivalent to “pipes” in the pandas or python programming language. Here the easiest way is to creat a new column in our DataFrame with the average speed in it. The pandas specific .div() command allows for a fast division of two columns. Also modify the equation such that the values are in km/h.\n#| label: flightsaveragespeed\nflights['speed'] = flights['distance'].div(flights['air_time'])\nThe filter function is not available in python. IMHO the .loc function is the most comprehensive function the filter a DataFrame by using logical expressions.\nPractice .loc operations, which subsets certain observations of a dataframe. Write a line which filters the flights which\n\nhad an arrival delay of two or more hours\nflew to Houston (IAH or HOU)\narrived more than two hours late, but didn’t leave late\nstarted with a delay of at least an hour, but made up over 30 minutes in flight.\n\nuse individual lines for each filter. In the end use .describe() on the flights DataFrame. Now, we want to know the average delay at departue for each of the three airports of origin. This is done with a groupby(..) applied to the filtered DataFrame. additionally apply mean() and select the correct column. Find out how and modify the code in the chunk accordingly.\n#| label: flightsaveragespeed\nflights = flights.loc[flights['arr_delay']>=120] # 120 minutes\nNOTE: If you do not choose a new variable name for the DataFrame, data is lost, until you reload the complete DataFrame\nFinally, look at the plot of airportlocations. The airport locations show the shape of the United States of America, but there are four airports on the right hand side which do not fit that pattern. Filter airports such that you only see these four airport. Write your solution into the chunk stangeairportlocations. Check with internet research where these airports are located. Why are the locations from the data as they are? List your hypotheses for each airport under the chunk.\n#| label: strangeairportlocations\nplt.figure(figsize=(20,6))\nplt.plot( airports[..],airports[..] ,'.')"
  },
  {
    "objectID": "W4.html#scientific-and-technical-publishing-system",
    "href": "W4.html#scientific-and-technical-publishing-system",
    "title": "W#4 Data Wrangling",
    "section": "Scientific and technical publishing system",
    "text": "Scientific and technical publishing system\nWeaves together narrative text and code to produces good-looking formatted output."
  },
  {
    "objectID": "W4.html#publishing-system",
    "href": "W4.html#publishing-system",
    "title": "W#4 Data import, data wrangling",
    "section": "Publishing system",
    "text": "Publishing system\nWeaves together text and code to produces good-looking formatted scientific or technical output.\n\n   \n\n\nA YAML header and Markdown text with code chunks is rendered to a document in several formats.\n notebook is a similar concept: text and executable code mixed together in a browser tab. Can be rendered by quarto. Popular in the python world."
  },
  {
    "objectID": "W4.html#integrated-development-environment",
    "href": "W4.html#integrated-development-environment",
    "title": "W#4 Data import, data wrangling",
    "section": "Integrated development environment",
    "text": "Integrated development environment\nIDEs provide terminals, a source code editor, an object browser, output and help view, tools for rendering and version control, and more to help in the workflow. Our IDEs are:\n\n    VS Code\n\n\nEditors delight us with\n\nsyntax highlighting Then we see if code looks good\n\nc(1O, Text, true, 10,\"Text\",TRUE)\n\ncode completion Start writing, and press Tab to see options\nautomatic indentation, brace matching, keyboard shortcuts, …"
  },
  {
    "objectID": "W4.html#version-control",
    "href": "W4.html#version-control",
    "title": "W#4 Data import, data wrangling",
    "section": "Version control",
    "text": "Version control\n   \ngit manages local versioning of files in a directory1 as repository2, and merging different versions of the repository.\nGitHub provides git server for repositories and collaborative tools.\nDirectory = FolderRepository = A directory including a subfolder .git which stores the history of as commits."
  },
  {
    "objectID": "W4.html#command-line-interfaces",
    "href": "W4.html#command-line-interfaces",
    "title": "W#4 Data import, data wrangling",
    "section": "Command line interfaces",
    "text": "Command line interfaces\nIn CLIs you communicate with your computer using the Read-Evaluate-Print-Loop (REPL). Terminal, Shell, Console all mostly synonym to CLI\n\nTerminal to access files and programs via commands in bash or zsh1. Also available in RStudio and VS Code.\nR console provided in RStudio2\npython3 console provided by VS Code3\n\nLanguages used in the Terminal with commands like cd=change directory, pwd=print working directory, or ls=list files.Can also be started in Terminal with RCan also be started in Terminal with python3"
  },
  {
    "objectID": "W4.html#publish-what",
    "href": "W4.html#publish-what",
    "title": "W#4 Data import, data wrangling",
    "section": "Publish what?",
    "text": "Publish what?\n\nyour project report as (html)\nmake a personal website (using GitHub pages)\nwrite your thesis (pdf)"
  },
  {
    "objectID": "W4.html#data-hotel-bookings",
    "href": "W4.html#data-hotel-bookings",
    "title": "W#4 Data import, data wrangling",
    "section": "Data: Hotel bookings",
    "text": "Data: Hotel bookings\n\nData from two hotels: one resort and one city hotel\nObservations: Each row represents a hotel booking\n\n\n\nhotels<- read_csv(\"data/hotels.csv\")\n\nRows: 119390 Columns: 32\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (13): hotel, arrival_date_month, meal, country, market_segment, distrib...\ndbl  (18): is_canceled, lead_time, arrival_date_year, arrival_date_week_numb...\ndate  (1): reservation_status_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "W4.html#grammar-of-data-wrangling",
    "href": "W4.html#grammar-of-data-wrangling",
    "title": "W#4 Data import, data wrangling",
    "section": "Grammar of Data Wrangling",
    "text": "Grammar of Data Wrangling\n\n\n\n\n\nGrammar of data wrangling: Start with a dataset and pipe it through several manipulations with |>\nmpg |> \n  filter(cyl == 8) |> \n  select(manufacturer, hwy) |> \n  group_by(manufacturer) |> \n  summarize(mean_hwy = mean(hwy))\n\n\nIn python: Similar concept making a chain using . to apply pandas methods for data frames one after the other.\nCompare the grammar of graphics ggplot2: Start creating a ggplot object, specifying data, and mapping variables to aesthetics, add graphical layers (geom_ functions) with +\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = trans)) + \n  geom_point() + \n  geom_smooth()"
  },
  {
    "objectID": "W4.html#select",
    "href": "W4.html#select",
    "title": "W#4 Data Wrangling",
    "section": "Select",
    "text": "Select\nBack to the hotel booking data\n\nhotels<- read_csv(\"data/hotels.csv\")\n\nFirst look\n\nnames(hotels)\n\n\n\n [1] \"hotel\"                          \"is_canceled\"                   \n [3] \"lead_time\"                      \"arrival_date_year\"             \n [5] \"arrival_date_month\"             \"arrival_date_week_number\"      \n [7] \"arrival_date_day_of_month\"      \"stays_in_weekend_nights\"       \n [9] \"stays_in_week_nights\"           \"adults\"                        \n[11] \"children\"                       \"babies\"                        \n[13] \"meal\"                           \"country\"                       \n[15] \"market_segment\"                 \"distribution_channel\"          \n[17] \"is_repeated_guest\"              \"previous_cancellations\"        \n[19] \"previous_bookings_not_canceled\" \"reserved_room_type\"            \n[21] \"assigned_room_type\"             \"booking_changes\"               \n[23] \"deposit_type\"                   \"agent\"                         \n[25] \"company\"                        \"days_in_waiting_list\"          \n[27] \"customer_type\"                  \"adr\"                           \n[29] \"required_car_parking_spaces\"    \"total_of_special_requests\"     \n[31] \"reservation_status\"             \"reservation_status_date\""
  },
  {
    "objectID": "W4.html#filter",
    "href": "W4.html#filter",
    "title": "W#4 Data Wrangling",
    "section": "Filter",
    "text": "Filter"
  },
  {
    "objectID": "W4.html#comma-separated-values-csv-files",
    "href": "W4.html#comma-separated-values-csv-files",
    "title": "W#4 Data Wrangling",
    "section": "Comma-separated values – CSV Files",
    "text": "Comma-separated values – CSV Files\nDelimited text file\n\nCan be viewed with any text editor\nShow each row of the data frame in a line\nSeparates the content of columns by commas (or the delimiter character)\n\nThe first line is interpreted as a"
  },
  {
    "objectID": "W4.html#logical-operations",
    "href": "W4.html#logical-operations",
    "title": "W#4 Data Wrangling",
    "section": "Logical1 operations",
    "text": "Logical1 operations\n\n\nx <- c(TRUE, FALSE, TRUE)\ny <- c(TRUE, TRUE, FALSE)  \nx & y\n\n\n[1]  TRUE FALSE FALSE\n\nx | y\n\n[1] TRUE TRUE TRUE\n\n\n\n\n\nx | y\n\n\n\n[1] TRUE TRUE TRUE\n\n\n\nLogical is sometimes called Boolean"
  },
  {
    "objectID": "W4.html#logical-operations-output",
    "href": "W4.html#logical-operations-output",
    "title": "W#4 Data Wrangling",
    "section": "Logical1 operations",
    "text": "Logical1 operations\n\n[1]  TRUE FALSE FALSE\n\nLogical is sometimes called Boolean"
  },
  {
    "objectID": "W4.html#readr-and-readxl",
    "href": "W4.html#readr-and-readxl",
    "title": "W#4 Data import, data wrangling",
    "section": "readr and readxl",
    "text": "readr and readxl\n\n\n\n\nread_csv() - comma delimited files\nread_csv2() - semicolon delimited files (common where “,” is used as decimal place)\nread_tsv() - tab delimited files\nread_delim() - reads in files with any delimiter\n…\n\n\n\n\nread_excel() read xls or xlsx files from MS Excel\n…"
  },
  {
    "objectID": "W4.html#logical6-operations",
    "href": "W4.html#logical6-operations",
    "title": "W#4 Data Wrangling",
    "section": "Logical1 operations",
    "text": "Logical1 operations\n\n\nx <- c(TRUE, FALSE, TRUE)\ny <- c(TRUE, TRUE, FALSE)  \nx & y\n\n\n[1]  TRUE FALSE FALSE\n\nx | y\n\n[1] TRUE TRUE TRUE\n\n\n\n\n\nx | y\n\n\n\n[1] TRUE TRUE TRUE\n\n\n\nLogical is sometimes called Boolean"
  },
  {
    "objectID": "W4.html#feedback-on-homework-01-1",
    "href": "W4.html#feedback-on-homework-01-1",
    "title": "W#4 Data Wrangling",
    "section": "Feedback on Homework 01",
    "text": "Feedback on Homework 01\nSome of you did not modify the line\n“The dimension with the most experience is … The dimension with the least experience is …”\nor did not replace the line\n“Remove this text and write you answer to Exercise 4.”"
  },
  {
    "objectID": "W4.html#quarto-and-git-only-use-the-cli",
    "href": "W4.html#quarto-and-git-only-use-the-cli",
    "title": "W#4 Data import, data wrangling",
    "section": "quarto and git only use the CLI",
    "text": "quarto and git only use the CLI\nFor example:\n\nquarto render MyFile.qmd --to docx renders the MyFile.qmd to a Word file  git add MyFile.qmd adds MyFile.qmd (or ots changes) to the staging area\ngit commit -m \"Update of code\" creates new commit with staged files\ngit push merge local commit into repository it was cloned from\n\n\nRStudio/VS Code provide buttons and shortcuts for the most common commands\nYou can also do it yourself.\nUse it to solve a problem in an “uncommon” situation, after research about the problem:\n\nread error message carefully (often they give a hint, but not always)\nsearching StackOverflow\nasking others\nfiling an issue in our General Discussion"
  },
  {
    "objectID": "W4.html#other-data-formats",
    "href": "W4.html#other-data-formats",
    "title": "W#4 Data import, data wrangling",
    "section": "Other data formats",
    "text": "Other data formats\nR packages, analog libraries will exist for python\n\ngooglesheets4: Google Sheets\nhaven: SPSS, Stata, and SAS files\nDBI, along with a database specific backend (e.g. RMySQL, RSQLite, RPostgreSQL etc): allows you to run SQL queries against a database and return a data frame\njsonline: JSON\nxml2: xml\nrvest: web scraping\nhttr: web APIs\n…"
  },
  {
    "objectID": "W4.html#comma-separated-values-csv",
    "href": "W4.html#comma-separated-values-csv",
    "title": "W#4 Data import, data wrangling",
    "section": "Comma-separated values (CSV)",
    "text": "Comma-separated values (CSV)\nWe use this when there is no certain reason to do otherwise (it is not provided, or storage is an issue).\nCSV files are delimited text file\n\nCan be viewed with any text editor\nShow each row of the data frame in a line\nSeparates the content of columns by commas (or the delimiter character)\nEach cell could be surrounded by quotes (when long text with commas (!) is in cells)\nThe first line is interpreted as listing the variable names by default\n\nreadr tries to guess the data type of variables\nYou can also customize it yourself!"
  },
  {
    "objectID": "W4.html#data-import-workflow",
    "href": "W4.html#data-import-workflow",
    "title": "W#4 Data import, data wrangling",
    "section": "Data import workflow",
    "text": "Data import workflow\n\nYou download your CSV file to the data/ directory. You may use download.file() for this, but make sure you do not download large amounts of data each time you render your file! (Comment out # and use again only when needed.)\nRead the data with data <- read_csv(\"data/FILENAME.csv\") and read the report in the console.\nExplore if you are happy and iterate by customizing you data import line using specifications (see the function help) until the data is as you want it to be.\n\nUse this for Homework 02 for the ESS and corona projects.\nSelf-learning:  concepts similar for loading CSV in python."
  },
  {
    "objectID": "W4.html#columns-types",
    "href": "W4.html#columns-types",
    "title": "W#4 Data import, data wrangling",
    "section": "Columns types",
    "text": "Columns types\n\n\n\ntype function\ndata type\n\n\n\n\ncol_character()\ncharacter\n\n\ncol_date()\ndate\n\n\ncol_datetime()\nPOSIXct (date-time)\n\n\ncol_double()\ndouble (numeric)\n\n\ncol_factor()\nfactor\n\n\ncol_guess()\nlet readr guess (default)\n\n\ncol_integer()\ninteger\n\n\ncol_logical()\nlogical\n\n\ncol_number()\nnumbers mixed with non-number characters\n\n\ncol_numeric()\ndouble or integer\n\n\ncol_skip()\ndo not read\n\n\ncol_time()\ntime"
  },
  {
    "objectID": "W4.html#dplyr-uses-several-verbs-to-describe-manipulation",
    "href": "W4.html#dplyr-uses-several-verbs-to-describe-manipulation",
    "title": "W#4 Data Wrangling",
    "section": "dplyr uses several verbs to describe manipulation",
    "text": "dplyr uses several verbs to describe manipulation\n\nselect: pick columns by name\narrange: reorder rows\nslice: pick rows using index(es)\nfilter: pick rows matching criteria\ndistinct: filter for unique rows\nmutate: add new variables\nsummarise: reduce variables to values\ngroup_by: for grouped operations\n… (many more)"
  },
  {
    "objectID": "W4.html#dplyr-uses-verbs-to-describe-manipulation",
    "href": "W4.html#dplyr-uses-verbs-to-describe-manipulation",
    "title": "W#4 Data Wrangling",
    "section": "dplyr uses verbs to describe manipulation",
    "text": "dplyr uses verbs to describe manipulation\n\nselect: pick columns by name\narrange: reorder rows\nslice: pick rows using index(es)\nfilter: pick rows matching criteria\ndistinct: filter for unique rows\nmutate: add new variables\nsummarise: reduce variables to values\ngroup_by: for grouped operations\n… (many more)"
  },
  {
    "objectID": "W4.html#dplyr-uses-verbs-to-manipulate",
    "href": "W4.html#dplyr-uses-verbs-to-manipulate",
    "title": "W#4 Data import, data wrangling",
    "section": "dplyr uses verbs to manipulate",
    "text": "dplyr uses verbs to manipulate\n\nselect: pick columns by name\narrange: reorder rows\nslice: pick rows using index(es)\nfilter: pick rows matching criteria\ndistinct: filter for unique rows\nmutate: add new variables\nsummarise: reduce variables to values\ngroup_by: for grouped operations\n… (many more)\n\nWhy does piping with |> work?\n\nBecause every dplyr function takes a data frame as first argument and outputs a (manipulated) data frame."
  },
  {
    "objectID": "W4.html#back-to-the-hotel-booking-data",
    "href": "W4.html#back-to-the-hotel-booking-data",
    "title": "W#4 Data Wrangling",
    "section": "Back to the hotel booking data",
    "text": "Back to the hotel booking data\n\nhotels<- read_csv(\"data/hotels.csv\")\n\nFirst look\n\nnames(hotels)\n\n\n\n [1] \"hotel\"                          \"is_canceled\"                   \n [3] \"lead_time\"                      \"arrival_date_year\"             \n [5] \"arrival_date_month\"             \"arrival_date_week_number\"      \n [7] \"arrival_date_day_of_month\"      \"stays_in_weekend_nights\"       \n [9] \"stays_in_week_nights\"           \"adults\"                        \n[11] \"children\"                       \"babies\"                        \n[13] \"meal\"                           \"country\"                       \n[15] \"market_segment\"                 \"distribution_channel\"          \n[17] \"is_repeated_guest\"              \"previous_cancellations\"        \n[19] \"previous_bookings_not_canceled\" \"reserved_room_type\"            \n[21] \"assigned_room_type\"             \"booking_changes\"               \n[23] \"deposit_type\"                   \"agent\"                         \n[25] \"company\"                        \"days_in_waiting_list\"          \n[27] \"customer_type\"                  \"adr\"                           \n[29] \"required_car_parking_spaces\"    \"total_of_special_requests\"     \n[31] \"reservation_status\"             \"reservation_status_date\""
  },
  {
    "objectID": "W4.html#back-to-the-hotel-booking-data-first-look",
    "href": "W4.html#back-to-the-hotel-booking-data-first-look",
    "title": "W#4 Data import, data wrangling",
    "section": "Back to the hotel booking data: First look",
    "text": "Back to the hotel booking data: First look\n\nhotels<- read_csv(\"data/hotels.csv\")\n\nFirst look on variables names\n\nnames(hotels)\n\n\n\n [1] \"hotel\"                          \"is_canceled\"                   \n [3] \"lead_time\"                      \"arrival_date_year\"             \n [5] \"arrival_date_month\"             \"arrival_date_week_number\"      \n [7] \"arrival_date_day_of_month\"      \"stays_in_weekend_nights\"       \n [9] \"stays_in_week_nights\"           \"adults\"                        \n[11] \"children\"                       \"babies\"                        \n[13] \"meal\"                           \"country\"                       \n[15] \"market_segment\"                 \"distribution_channel\"          \n[17] \"is_repeated_guest\"              \"previous_cancellations\"        \n[19] \"previous_bookings_not_canceled\" \"reserved_room_type\"            \n[21] \"assigned_room_type\"             \"booking_changes\"               \n[23] \"deposit_type\"                   \"agent\"                         \n[25] \"company\"                        \"days_in_waiting_list\"          \n[27] \"customer_type\"                  \"adr\"                           \n[29] \"required_car_parking_spaces\"    \"total_of_special_requests\"     \n[31] \"reservation_status\"             \"reservation_status_date\""
  },
  {
    "objectID": "W4.html#second-look-glimpse",
    "href": "W4.html#second-look-glimpse",
    "title": "W#4 Data import, data wrangling",
    "section": "Second look glimpse",
    "text": "Second look glimpse\n\nglimpse(hotels)\n\n\n\nRows: 119,390\nColumns: 32\n$ hotel                          <chr> \"Resort Hotel\", \"Resort Hotel\", \"Resort…\n$ is_canceled                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, …\n$ lead_time                      <dbl> 342, 737, 7, 13, 14, 14, 0, 9, 85, 75, …\n$ arrival_date_year              <dbl> 2015, 2015, 2015, 2015, 2015, 2015, 201…\n$ arrival_date_month             <chr> \"July\", \"July\", \"July\", \"July\", \"July\",…\n$ arrival_date_week_number       <dbl> 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,…\n$ arrival_date_day_of_month      <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ stays_in_weekend_nights        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ stays_in_week_nights           <dbl> 0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 4, …\n$ adults                         <dbl> 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, …\n$ children                       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ babies                         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ meal                           <chr> \"BB\", \"BB\", \"BB\", \"BB\", \"BB\", \"BB\", \"BB…\n$ country                        <chr> \"PRT\", \"PRT\", \"GBR\", \"GBR\", \"GBR\", \"GBR…\n$ market_segment                 <chr> \"Direct\", \"Direct\", \"Direct\", \"Corporat…\n$ distribution_channel           <chr> \"Direct\", \"Direct\", \"Direct\", \"Corporat…\n$ is_repeated_guest              <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ previous_cancellations         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ previous_bookings_not_canceled <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ reserved_room_type             <chr> \"C\", \"C\", \"A\", \"A\", \"A\", \"A\", \"C\", \"C\",…\n$ assigned_room_type             <chr> \"C\", \"C\", \"C\", \"A\", \"A\", \"A\", \"C\", \"C\",…\n$ booking_changes                <dbl> 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ deposit_type                   <chr> \"No Deposit\", \"No Deposit\", \"No Deposit…\n$ agent                          <chr> \"NULL\", \"NULL\", \"NULL\", \"304\", \"240\", \"…\n$ company                        <chr> \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\",…\n$ days_in_waiting_list           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ customer_type                  <chr> \"Transient\", \"Transient\", \"Transient\", …\n$ adr                            <dbl> 0.00, 0.00, 75.00, 75.00, 98.00, 98.00,…\n$ required_car_parking_spaces    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ total_of_special_requests      <dbl> 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 3, …\n$ reservation_status             <chr> \"Check-Out\", \"Check-Out\", \"Check-Out\", …\n$ reservation_status_date        <date> 2015-07-01, 2015-07-01, 2015-07-02, 20…"
  },
  {
    "objectID": "W4.html#select-a-sinlge-colum",
    "href": "W4.html#select-a-sinlge-colum",
    "title": "W#4 Data import, data wrangling",
    "section": "Select a sinlge colum",
    "text": "Select a sinlge colum\n\nhotels |> select(lead_time)     \n\n\n\n# A tibble: 119,390 × 1\n   lead_time\n       <dbl>\n 1       342\n 2       737\n 3         7\n 4        13\n 5        14\n 6        14\n 7         0\n 8         9\n 9        85\n10        75\n# … with 119,380 more rows\n\n\nNote: select(hotels, lead_time) is identical.\n\n\nIn hotel business, lead time is the time betweeen booking and arrival."
  },
  {
    "objectID": "W4.html#select-a-more-columns",
    "href": "W4.html#select-a-more-columns",
    "title": "W#4 Data Wrangling",
    "section": "Select a more columns",
    "text": "Select a more columns\n\nhotels |> select(hotel, lead_time)     \n\n\n\n# A tibble: 119,390 × 2\n   hotel        lead_time\n   <chr>            <dbl>\n 1 Resort Hotel       342\n 2 Resort Hotel       737\n 3 Resort Hotel         7\n 4 Resort Hotel        13\n 5 Resort Hotel        14\n 6 Resort Hotel        14\n 7 Resort Hotel         0\n 8 Resort Hotel         9\n 9 Resort Hotel        85\n10 Resort Hotel        75\n# … with 119,380 more rows\n\n\nNote that hotel is a variable, but hotels the data frame object name"
  },
  {
    "objectID": "W4.html#select-more-columns",
    "href": "W4.html#select-more-columns",
    "title": "W#4 Data import, data wrangling",
    "section": "Select more columns",
    "text": "Select more columns\n\nhotels |> select(hotel, lead_time)     \n\n\n\n# A tibble: 119,390 × 2\n   hotel        lead_time\n   <chr>            <dbl>\n 1 Resort Hotel       342\n 2 Resort Hotel       737\n 3 Resort Hotel         7\n 4 Resort Hotel        13\n 5 Resort Hotel        14\n 6 Resort Hotel        14\n 7 Resort Hotel         0\n 8 Resort Hotel         9\n 9 Resort Hotel        85\n10 Resort Hotel        75\n# … with 119,380 more rows\n\n\nNote that hotel is a variable, but hotels the data frame object name"
  },
  {
    "objectID": "W4.html#select-helpers-starts_with-everything",
    "href": "W4.html#select-helpers-starts_with-everything",
    "title": "W#4 Data Wrangling",
    "section": "Select helpers starts_with, everything",
    "text": "Select helpers starts_with, everything\n\n\n\nhotels |> select(starts_with(\"arrival\"))\n\n# A tibble: 119,390 × 4\n   arrival_date_year arrival_date_month arrival_date_week_number arrival_date_…¹\n               <dbl> <chr>                                 <dbl>           <dbl>\n 1              2015 July                                     27               1\n 2              2015 July                                     27               1\n 3              2015 July                                     27               1\n 4              2015 July                                     27               1\n 5              2015 July                                     27               1\n 6              2015 July                                     27               1\n 7              2015 July                                     27               1\n 8              2015 July                                     27               1\n 9              2015 July                                     27               1\n10              2015 July                                     27               1\n# … with 119,380 more rows, and abbreviated variable name\n#   ¹​arrival_date_day_of_month\n\n\n\n\nBring columns you want to see to the front\n\nhotels |> select(hotel, market_segment, children, everything())\n\n# A tibble: 119,390 × 32\n   hotel marke…¹ child…² is_ca…³ lead_…⁴ arriv…⁵ arriv…⁶ arriv…⁷ arriv…⁸ stays…⁹\n   <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>\n 1 Reso… Direct        0       0     342    2015 July         27       1       0\n 2 Reso… Direct        0       0     737    2015 July         27       1       0\n 3 Reso… Direct        0       0       7    2015 July         27       1       0\n 4 Reso… Corpor…       0       0      13    2015 July         27       1       0\n 5 Reso… Online…       0       0      14    2015 July         27       1       0\n 6 Reso… Online…       0       0      14    2015 July         27       1       0\n 7 Reso… Direct        0       0       0    2015 July         27       1       0\n 8 Reso… Direct        0       0       9    2015 July         27       1       0\n 9 Reso… Online…       0       1      85    2015 July         27       1       0\n10 Reso… Offlin…       0       1      75    2015 July         27       1       0\n# … with 119,380 more rows, 22 more variables: stays_in_week_nights <dbl>,\n#   adults <dbl>, babies <dbl>, meal <chr>, country <chr>,\n#   distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …"
  },
  {
    "objectID": "W4.html#select-helper-starts_with",
    "href": "W4.html#select-helper-starts_with",
    "title": "W#4 Data import, data wrangling",
    "section": "Select helper starts_with",
    "text": "Select helper starts_with\n\nhotels |> select(starts_with(\"arrival\"))\n\n\n\n# A tibble: 119,390 × 4\n   arrival_date_year arrival_date_month arrival_date_week_number arrival_date_…¹\n               <dbl> <chr>                                 <dbl>           <dbl>\n 1              2015 July                                     27               1\n 2              2015 July                                     27               1\n 3              2015 July                                     27               1\n 4              2015 July                                     27               1\n 5              2015 July                                     27               1\n 6              2015 July                                     27               1\n 7              2015 July                                     27               1\n 8              2015 July                                     27               1\n 9              2015 July                                     27               1\n10              2015 July                                     27               1\n# … with 119,380 more rows, and abbreviated variable name\n#   ¹​arrival_date_day_of_month"
  },
  {
    "objectID": "W4.html#bring-columns-you-want-to-see-to-the-front",
    "href": "W4.html#bring-columns-you-want-to-see-to-the-front",
    "title": "W#4 Data Wrangling",
    "section": "Bring columns you want to see to the front",
    "text": "Bring columns you want to see to the front\n\nhotels |> select(hotel, market_segment, children, everything())\n\n\n\n# A tibble: 119,390 × 32\n   hotel marke…¹ child…² is_ca…³ lead_…⁴ arriv…⁵ arriv…⁶ arriv…⁷ arriv…⁸ stays…⁹\n   <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>\n 1 Reso… Direct        0       0     342    2015 July         27       1       0\n 2 Reso… Direct        0       0     737    2015 July         27       1       0\n 3 Reso… Direct        0       0       7    2015 July         27       1       0\n 4 Reso… Corpor…       0       0      13    2015 July         27       1       0\n 5 Reso… Online…       0       0      14    2015 July         27       1       0\n 6 Reso… Online…       0       0      14    2015 July         27       1       0\n 7 Reso… Direct        0       0       0    2015 July         27       1       0\n 8 Reso… Direct        0       0       9    2015 July         27       1       0\n 9 Reso… Online…       0       1      85    2015 July         27       1       0\n10 Reso… Offlin…       0       1      75    2015 July         27       1       0\n# … with 119,380 more rows, 22 more variables: stays_in_week_nights <dbl>,\n#   adults <dbl>, babies <dbl>, meal <chr>, country <chr>,\n#   distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …"
  },
  {
    "objectID": "W4.html#bring-columns-to-the-front",
    "href": "W4.html#bring-columns-to-the-front",
    "title": "W#4 Data import, data wrangling",
    "section": "Bring columns to the front",
    "text": "Bring columns to the front\n\nhotels |> select(hotel, market_segment, children, everything())\n\n\n\n# A tibble: 119,390 × 32\n   hotel marke…¹ child…² is_ca…³ lead_…⁴ arriv…⁵ arriv…⁶ arriv…⁷ arriv…⁸ stays…⁹\n   <chr> <chr>     <dbl>   <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>\n 1 Reso… Direct        0       0     342    2015 July         27       1       0\n 2 Reso… Direct        0       0     737    2015 July         27       1       0\n 3 Reso… Direct        0       0       7    2015 July         27       1       0\n 4 Reso… Corpor…       0       0      13    2015 July         27       1       0\n 5 Reso… Online…       0       0      14    2015 July         27       1       0\n 6 Reso… Online…       0       0      14    2015 July         27       1       0\n 7 Reso… Direct        0       0       0    2015 July         27       1       0\n 8 Reso… Direct        0       0       9    2015 July         27       1       0\n 9 Reso… Online…       0       1      85    2015 July         27       1       0\n10 Reso… Offlin…       0       1      75    2015 July         27       1       0\n# … with 119,380 more rows, 22 more variables: stays_in_week_nights <dbl>,\n#   adults <dbl>, babies <dbl>, meal <chr>, country <chr>,\n#   distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …"
  },
  {
    "objectID": "W4.html#slicefor-certain-rows",
    "href": "W4.html#slicefor-certain-rows",
    "title": "W#4 Data Wrangling",
    "section": "slicefor certain rows",
    "text": "slicefor certain rows\n\nhotels |> slice(2:4)\n\n\n\n# A tibble: 3 × 32\n  hotel   is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n  <chr>     <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n1 Resort…       0     737    2015 July         27       1       0       0      2\n2 Resort…       0       7    2015 July         27       1       0       1      1\n3 Resort…       0      13    2015 July         27       1       0       1      1\n# … with 22 more variables: children <dbl>, babies <dbl>, meal <chr>,\n#   country <chr>, market_segment <chr>, distribution_channel <chr>,\n#   is_repeated_guest <dbl>, previous_cancellations <dbl>,\n#   previous_bookings_not_canceled <dbl>, reserved_room_type <chr>,\n#   assigned_room_type <chr>, booking_changes <dbl>, deposit_type <chr>,\n#   agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …"
  },
  {
    "objectID": "W4.html#more-select-helpers",
    "href": "W4.html#more-select-helpers",
    "title": "W#4 Data import, data wrangling",
    "section": "More select helpers",
    "text": "More select helpers\n\nstarts_with(): Starts with a prefix\nends_with(): Ends with a suffix\ncontains(): Contains a literal string\nnum_range(): Matches a numerical range like x01, x02, x03\none_of(): Matches variable names in a character vector\neverything(): Matches all variables\nlast_col(): Select last variable, possibly with an offset\nmatches(): Matches a regular expression (a sequence of symbols/characters expressing a string/pattern to be searched for within text)\n\n\n\nCheck details with ?one_of"
  },
  {
    "objectID": "W4.html#slice-for-certain-rows",
    "href": "W4.html#slice-for-certain-rows",
    "title": "W#4 Data import, data wrangling",
    "section": "slice for certain rows",
    "text": "slice for certain rows\n\nhotels |> slice(2:4)\n\n\n\n# A tibble: 3 × 32\n  hotel   is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n  <chr>     <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n1 Resort…       0     737    2015 July         27       1       0       0      2\n2 Resort…       0       7    2015 July         27       1       0       1      1\n3 Resort…       0      13    2015 July         27       1       0       1      1\n# … with 22 more variables: children <dbl>, babies <dbl>, meal <chr>,\n#   country <chr>, market_segment <chr>, distribution_channel <chr>,\n#   is_repeated_guest <dbl>, previous_cancellations <dbl>,\n#   previous_bookings_not_canceled <dbl>, reserved_room_type <chr>,\n#   assigned_room_type <chr>, booking_changes <dbl>, deposit_type <chr>,\n#   agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …"
  },
  {
    "objectID": "W4.html#filter-for-rows-with-certain-criteria",
    "href": "W4.html#filter-for-rows-with-certain-criteria",
    "title": "W#4 Data import, data wrangling",
    "section": "filter for rows with certain criteria",
    "text": "filter for rows with certain criteria\n\nhotels |> filter(hotel == \"City Hotel\")\n\n\n\n# A tibble: 79,330 × 32\n   hotel  is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n   <chr>    <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n 1 City …       0       6    2015 July         27       1       0       2      1\n 2 City …       1      88    2015 July         27       1       0       4      2\n 3 City …       1      65    2015 July         27       1       0       4      1\n 4 City …       1      92    2015 July         27       1       2       4      2\n 5 City …       1     100    2015 July         27       2       0       2      2\n 6 City …       1      79    2015 July         27       2       0       3      2\n 7 City …       0       3    2015 July         27       2       0       3      1\n 8 City …       1      63    2015 July         27       2       1       3      1\n 9 City …       1      62    2015 July         27       2       2       3      2\n10 City …       1      62    2015 July         27       2       2       3      2\n# … with 79,320 more rows, 22 more variables: children <dbl>, babies <dbl>,\n#   meal <chr>, country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …"
  },
  {
    "objectID": "W4.html#filter-for-multiple-criteria",
    "href": "W4.html#filter-for-multiple-criteria",
    "title": "W#4 Data import, data wrangling",
    "section": "filter for multiple criteria",
    "text": "filter for multiple criteria\n\nhotels |> filter(\n  babies >= 1,\n  children >= 1, \n  ) |> \n  select(hotel, adults, babies, children)\n\n\n\n# A tibble: 175 × 4\n   hotel        adults babies children\n   <chr>         <dbl>  <dbl>    <dbl>\n 1 Resort Hotel      2      1        1\n 2 Resort Hotel      2      1        1\n 3 Resort Hotel      2      1        1\n 4 Resort Hotel      2      1        1\n 5 Resort Hotel      2      1        1\n 6 Resort Hotel      2      1        1\n 7 Resort Hotel      2      1        1\n 8 Resort Hotel      2      1        2\n 9 Resort Hotel      2      1        2\n10 Resort Hotel      1      1        2\n# … with 165 more rows\n\n\nComma-separated conditions are interpreted as all these should be fulfilled.\nThis is identical to the logical AND &.\nhotels |> filter(babies >= 1 & children >= 1)"
  },
  {
    "objectID": "W4.html#filter-for-multiple-criteria-again",
    "href": "W4.html#filter-for-multiple-criteria-again",
    "title": "W#4 Data Wrangling",
    "section": "filter for multiple criteria again",
    "text": "filter for multiple criteria again\n\nhotels |> filter(\n  hotel == \"City Hotel\",\n  babies >= 1,\n  children >= 1, \n  ) |> \n  select(hotel, adults, babies, children)\n\n\n\n# A tibble: 72 × 4\n   hotel      adults babies children\n   <chr>       <dbl>  <dbl>    <dbl>\n 1 City Hotel      2      1        1\n 2 City Hotel      2      1        2\n 3 City Hotel      2      1        1\n 4 City Hotel      0      1        2\n 5 City Hotel      2      1        2\n 6 City Hotel      2      1        1\n 7 City Hotel      2      1        1\n 8 City Hotel      2      1        2\n 9 City Hotel      2      1        1\n10 City Hotel      2      1        2\n# … with 62 more rows"
  },
  {
    "objectID": "W4.html#filter-for-complexer-criteria",
    "href": "W4.html#filter-for-complexer-criteria",
    "title": "W#4 Data import, data wrangling",
    "section": "filter for complexer criteria",
    "text": "filter for complexer criteria\n\nhotels |> filter(\n  babies >= 1 | children >= 1\n  ) |> \n  select(hotel, adults, babies, children)\n\n\n\n# A tibble: 9,332 × 4\n   hotel        adults babies children\n   <chr>         <dbl>  <dbl>    <dbl>\n 1 Resort Hotel      2      0        1\n 2 Resort Hotel      2      0        2\n 3 Resort Hotel      2      0        2\n 4 Resort Hotel      2      0        2\n 5 Resort Hotel      2      0        1\n 6 Resort Hotel      2      0        1\n 7 Resort Hotel      1      0        2\n 8 Resort Hotel      2      0        2\n 9 Resort Hotel      2      1        0\n10 Resort Hotel      2      1        0\n# … with 9,322 more rows\n\n\n| is the logical OR. Only one criterion needs to be fulfilled."
  },
  {
    "objectID": "W4.html#logical-operators",
    "href": "W4.html#logical-operators",
    "title": "W#4 Data import, data wrangling",
    "section": "Logical operators1",
    "text": "Logical operators1\n\n\n\noperator\ndefinition\n\n\n\n\n<\nless than\n\n\n<=\nless than or equal to\n\n\n>\ngreater than\n\n\n>=\ngreater than or equal to\n\n\n==\nexactly equal to\n\n\n!=\nnot equal to\n\n\nx & y\nx AND y\n\n\nx | y\nx OR y\n\n\nis.na(x)\ntest if x is NA (misssing data)\n\n\n!is.na(x)\ntest if x is not NA (not missing data)\n\n\nx %in% y\ntest if x is in y (often used for strings)\n\n\n!(x %in% y)\ntest if x is not in y\n\n\n!x\nnot x\n\n\n\nLogical is sometimes called Boolean"
  },
  {
    "objectID": "W4.html#logical-indexing",
    "href": "W4.html#logical-indexing",
    "title": "W#4 Data Wrangling",
    "section": "Logical indexing",
    "text": "Logical indexing\nSelect and filter can also be achieved by logical indexing.\nIn R as well as in python.\nSelect ranges of rows and columns\n\nhotels[1:3,5:7]\n\n\n\n# A tibble: 3 × 3\n  arrival_date_month arrival_date_week_number arrival_date_day_of_month\n  <chr>                                 <dbl>                     <dbl>\n1 July                                     27                         1\n2 July                                     27                         1\n3 July                                     27                         1\n\n\nYou can use any vector (with non-overshooting indexes)\n\nhotels[c(1:3,100232),c(5:7,1)]\n\n\n\n# A tibble: 4 × 4\n  arrival_date_month arrival_date_week_number arrival_date_day_of_month hotel   \n  <chr>                                 <dbl>                     <dbl> <chr>   \n1 July                                     27                         1 Resort …\n2 July                                     27                         1 Resort …\n3 July                                     27                         1 Resort …\n4 October                                  44                        23 City Ho…"
  },
  {
    "objectID": "W4.html#python-is-0-indexed-r-is-1-indexed",
    "href": "W4.html#python-is-0-indexed-r-is-1-indexed",
    "title": "W#4 Data import, data wrangling",
    "section": "python is 0-indexed, R is 1-indexed!",
    "text": "python is 0-indexed, R is 1-indexed!\npython: indexes go from 0 to n-1\nR: indexes go from 1 to n\nBew aware!\nThere is no correct way. For some use cases one is more natural for others the other.\nAnalog: In mathematics there is an unsettled debate if 0 is the first natural number or 1"
  },
  {
    "objectID": "W4.html#indexing",
    "href": "W4.html#indexing",
    "title": "W#4 Data import, data wrangling",
    "section": "Indexing",
    "text": "Indexing\nSelect and filter can also be achieved by indexing.\nIn R as well as in python.\nSelect ranges of rows and columns\n\nhotels[1:3,5:7]\n\n\n\n# A tibble: 3 × 3\n  arrival_date_month arrival_date_week_number arrival_date_day_of_month\n  <chr>                                 <dbl>                     <dbl>\n1 July                                     27                         1\n2 July                                     27                         1\n3 July                                     27                         1\n\n\nYou can use any vector (with non-overshooting indexes)\n\nhotels[c(1:3,100232),c(5:7,1)]\n\n\n\n# A tibble: 4 × 4\n  arrival_date_month arrival_date_week_number arrival_date_day_of_month hotel   \n  <chr>                                 <dbl>                     <dbl> <chr>   \n1 July                                     27                         1 Resort …\n2 July                                     27                         1 Resort …\n3 July                                     27                         1 Resort …\n4 October                                  44                        23 City Ho…"
  },
  {
    "objectID": "W4.html#logical-indexing-with-logical-vectors",
    "href": "W4.html#logical-indexing-with-logical-vectors",
    "title": "W#4 Data import, data wrangling",
    "section": "Logical indexing with logical vectors",
    "text": "Logical indexing with logical vectors\n\n\ndata <- tibble(x = LETTERS[1:5], y = letters[6:10])\ndata\n\n\n# A tibble: 5 × 2\n  x     y    \n  <chr> <chr>\n1 A     f    \n2 B     g    \n3 C     h    \n4 D     i    \n5 E     j    \n\n\n\n\n\n\ndata[c(TRUE,FALSE,TRUE,FALSE,TRUE),c(TRUE,FALSE)]\n\n\n# A tibble: 3 × 1\n  x    \n  <chr>\n1 A    \n2 C    \n3 E"
  },
  {
    "objectID": "W4.html#logical-vectors-are-produced-by-conditional-statements",
    "href": "W4.html#logical-vectors-are-produced-by-conditional-statements",
    "title": "W#4 Data Wrangling",
    "section": "Logical vectors are produced by conditional statements",
    "text": "Logical vectors are produced by conditional statements\n\n\ndata$x\n\n\n[1] \"A\" \"B\" \"C\" \"D\" \"E\"\n\ndata$x %in% c(\"C\",\"E\")\n\n[1] FALSE FALSE  TRUE FALSE  TRUE\n\n\n\n\n\n\ndata[data$x %in% c(\"C\",\"E\"),]\n\n\n# A tibble: 2 × 2\n  x     y    \n  <chr> <chr>\n1 C     h    \n2 E     j"
  },
  {
    "objectID": "W4.html#logical-vectors-from-conditional-statements",
    "href": "W4.html#logical-vectors-from-conditional-statements",
    "title": "W#4 Data import, data wrangling",
    "section": "Logical vectors from conditional statements",
    "text": "Logical vectors from conditional statements\n\n\ndata$x\n\n\n[1] \"A\" \"B\" \"C\" \"D\" \"E\"\n\n\n\n\n\n\ndata$x %in% c(\"C\",\"E\")\n\n\n[1] FALSE FALSE  TRUE FALSE  TRUE\n\n\n\n\n\n\n\ndata[data$x %in% c(\"C\",\"E\"),]\n\n\n# A tibble: 2 × 2\n  x     y    \n  <chr> <chr>\n1 C     h    \n2 E     j    \n\n\n\n\n\n\n\ndata[data$x %in% c(\"C\",\"E\") | \n       data$y %in% c(\"h\",\"i\"),]\n\n\n# A tibble: 3 × 2\n  x     y    \n  <chr> <chr>\n1 C     h    \n2 D     i    \n3 E     j    \n\n\n\n\n\n\n\ndata |> \n  filter(\n    x %in% c(\"C\",\"E\") | y %in% c(\"h\",\"i\")\n    )\n\n\n# A tibble: 3 × 2\n  x     y    \n  <chr> <chr>\n1 C     h    \n2 D     i    \n3 E     j"
  },
  {
    "objectID": "W4.html#feedback-on-version-control",
    "href": "W4.html#feedback-on-version-control",
    "title": "W#4 Data import, data wrangling",
    "section": "Feedback on version control",
    "text": "Feedback on version control\n\nUsing git and GitHub is one of the most common modes of collaboration involving coding\nIt is a learning goal to get used to it\nIt will probably not go away after this course\ngit problems are sometimes uncomfortable to solve and require concentration and grit (also for experienced people)"
  },
  {
    "objectID": "W4.html#unique-combinations-counting-arranging-sorting",
    "href": "W4.html#unique-combinations-counting-arranging-sorting",
    "title": "W#4 Data Wrangling",
    "section": "Unique combinations, counting, arranging (sorting)",
    "text": "Unique combinations, counting, arranging (sorting)\ndistinct, count, arrange\n\nhotels |> \n  distinct(hotel, market_segment) |> \n  arrange(hotel, market_segment)\n\n\n\n# A tibble: 14 × 2\n   hotel        market_segment\n   <chr>        <chr>         \n 1 City Hotel   Aviation      \n 2 City Hotel   Complementary \n 3 City Hotel   Corporate     \n 4 City Hotel   Direct        \n 5 City Hotel   Groups        \n 6 City Hotel   Offline TA/TO \n 7 City Hotel   Online TA     \n 8 City Hotel   Undefined     \n 9 Resort Hotel Complementary \n10 Resort Hotel Corporate     \n11 Resort Hotel Direct        \n12 Resort Hotel Groups        \n13 Resort Hotel Offline TA/TO \n14 Resort Hotel Online TA     \n\n\n\n\n\nhotels |> \n  count(hotel, market_segment) |> \n  arrange(n)\n\n\n# A tibble: 14 × 3\n   hotel        market_segment     n\n   <chr>        <chr>          <int>\n 1 City Hotel   Undefined          2\n 2 Resort Hotel Complementary    201\n 3 City Hotel   Aviation         237\n 4 City Hotel   Complementary    542\n 5 Resort Hotel Corporate       2309\n 6 City Hotel   Corporate       2986\n 7 Resort Hotel Groups          5836\n 8 City Hotel   Direct          6093\n 9 Resort Hotel Direct          6513\n10 Resort Hotel Offline TA/TO   7472\n11 City Hotel   Groups         13975\n12 City Hotel   Offline TA/TO  16747\n13 Resort Hotel Online TA      17729\n14 City Hotel   Online TA      38748"
  },
  {
    "objectID": "W4.html#unique-combinations-arranging-sorting",
    "href": "W4.html#unique-combinations-arranging-sorting",
    "title": "W#4 Data import, data wrangling",
    "section": "Unique combinations, arranging (sorting)",
    "text": "Unique combinations, arranging (sorting)\ndistinct and arrange\n\nhotels |> \n  distinct(hotel, market_segment) |> \n  arrange(hotel, market_segment)\n\n\n\n# A tibble: 14 × 2\n   hotel        market_segment\n   <chr>        <chr>         \n 1 City Hotel   Aviation      \n 2 City Hotel   Complementary \n 3 City Hotel   Corporate     \n 4 City Hotel   Direct        \n 5 City Hotel   Groups        \n 6 City Hotel   Offline TA/TO \n 7 City Hotel   Online TA     \n 8 City Hotel   Undefined     \n 9 Resort Hotel Complementary \n10 Resort Hotel Corporate     \n11 Resort Hotel Direct        \n12 Resort Hotel Groups        \n13 Resort Hotel Offline TA/TO \n14 Resort Hotel Online TA"
  },
  {
    "objectID": "W4.html#counting",
    "href": "W4.html#counting",
    "title": "W#4 Data import, data wrangling",
    "section": "Counting",
    "text": "Counting\ncount\n\nhotels |> \n  count(hotel, market_segment) |>      # This produces a new variable n\n  arrange(n)\n\n\n\n# A tibble: 14 × 3\n   hotel        market_segment     n\n   <chr>        <chr>          <int>\n 1 City Hotel   Undefined          2\n 2 Resort Hotel Complementary    201\n 3 City Hotel   Aviation         237\n 4 City Hotel   Complementary    542\n 5 Resort Hotel Corporate       2309\n 6 City Hotel   Corporate       2986\n 7 Resort Hotel Groups          5836\n 8 City Hotel   Direct          6093\n 9 Resort Hotel Direct          6513\n10 Resort Hotel Offline TA/TO   7472\n11 City Hotel   Groups         13975\n12 City Hotel   Offline TA/TO  16747\n13 Resort Hotel Online TA      17729\n14 City Hotel   Online TA      38748"
  },
  {
    "objectID": "W4.html#create-a-new-variable-with-mutate",
    "href": "W4.html#create-a-new-variable-with-mutate",
    "title": "W#4 Data import, data wrangling",
    "section": "Create a new variable with mutate",
    "text": "Create a new variable with mutate\n\nhotels |>\n  mutate(little_ones = children + babies) |>\n  select(children, babies, little_ones) |>\n  arrange(desc(little_ones)) # This sorts in descending order. See the big thing!\n\n\n\n# A tibble: 119,390 × 3\n   children babies little_ones\n      <dbl>  <dbl>       <dbl>\n 1       10      0          10\n 2        0     10          10\n 3        0      9           9\n 4        2      1           3\n 5        2      1           3\n 6        2      1           3\n 7        3      0           3\n 8        2      1           3\n 9        2      1           3\n10        3      0           3\n# … with 119,380 more rows"
  },
  {
    "objectID": "W4.html#more-mutating",
    "href": "W4.html#more-mutating",
    "title": "W#4 Data import, data wrangling",
    "section": "More mutating",
    "text": "More mutating\n\nhotels |>\n  mutate(little_ones = children + babies) |>\n  count(hotel, little_ones) |>\n  mutate(prop = n / sum(n))\n\n\n\n# A tibble: 12 × 4\n   hotel        little_ones     n       prop\n   <chr>              <dbl> <int>      <dbl>\n 1 City Hotel             0 73923 0.619     \n 2 City Hotel             1  3263 0.0273    \n 3 City Hotel             2  2056 0.0172    \n 4 City Hotel             3    82 0.000687  \n 5 City Hotel             9     1 0.00000838\n 6 City Hotel            10     1 0.00000838\n 7 City Hotel            NA     4 0.0000335 \n 8 Resort Hotel           0 36131 0.303     \n 9 Resort Hotel           1  2183 0.0183    \n10 Resort Hotel           2  1716 0.0144    \n11 Resort Hotel           3    29 0.000243  \n12 Resort Hotel          10     1 0.00000838"
  },
  {
    "objectID": "W4.html#summarizing",
    "href": "W4.html#summarizing",
    "title": "W#4 Data import, data wrangling",
    "section": "Summarizing",
    "text": "Summarizing\n\nhotels |>\n  summarize(mean_adr = mean(adr))\n\n\n\n# A tibble: 1 × 1\n  mean_adr\n     <dbl>\n1     102.\n\n\n\nThat shrinks the data frame to one row!\nDon’t forget to name the new variable (here mean_adr)\nYou can use any function you can apply to a vector!\n(Sometimes you may need to write your own one.)\n\n\n\nIn hoteling, ADR is the average daily rate, the average daily rental income per paid occupied room. A performce indicator."
  },
  {
    "objectID": "W4.html#grouped-operations",
    "href": "W4.html#grouped-operations",
    "title": "W#4 Data import, data wrangling",
    "section": "Grouped operations",
    "text": "Grouped operations\n\nhotels |>\n  group_by(hotel) |>\n  summarise(mean_adr = mean(adr))\n\n\n\n# A tibble: 2 × 2\n  hotel        mean_adr\n  <chr>           <dbl>\n1 City Hotel      105. \n2 Resort Hotel     95.0\n\n\nLook at the grouping attributes:\n\nhotels |>\n  group_by(hotel)\n\n\n\n# A tibble: 119,390 × 32\n# Groups:   hotel [2]\n   hotel  is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n   <chr>    <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n 1 Resor…       0     342    2015 July         27       1       0       0      2\n 2 Resor…       0     737    2015 July         27       1       0       0      2\n 3 Resor…       0       7    2015 July         27       1       0       1      1\n 4 Resor…       0      13    2015 July         27       1       0       1      1\n 5 Resor…       0      14    2015 July         27       1       0       2      2\n 6 Resor…       0      14    2015 July         27       1       0       2      2\n 7 Resor…       0       0    2015 July         27       1       0       2      2\n 8 Resor…       0       9    2015 July         27       1       0       2      2\n 9 Resor…       1      85    2015 July         27       1       0       3      2\n10 Resor…       1      75    2015 July         27       1       0       3      2\n# … with 119,380 more rows, 22 more variables: children <dbl>, babies <dbl>,\n#   meal <chr>, country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …"
  },
  {
    "objectID": "W4.html#grouped-operations-1",
    "href": "W4.html#grouped-operations-1",
    "title": "W#4 Data Wrangling",
    "section": "Grouped operations",
    "text": "Grouped operations\n\nhotels |>\n  group_by(hotel, arrival_date_week_number) |>\n  summarise(mean_adr = mean(adr))\n\n\n\n# A tibble: 106 × 3\n# Groups:   hotel [2]\n   hotel      arrival_date_week_number mean_adr\n   <chr>                         <dbl>    <dbl>\n 1 City Hotel                        1     93.3\n 2 City Hotel                        2     80.4\n 3 City Hotel                        3     81.4\n 4 City Hotel                        4     80.8\n 5 City Hotel                        5     79.4\n 6 City Hotel                        6     84.4\n 7 City Hotel                        7     88.9\n 8 City Hotel                        8     85.0\n 9 City Hotel                        9     87.4\n10 City Hotel                       10     84.8\n# … with 96 more rows"
  },
  {
    "objectID": "W4.html#grouping-summarizing-visualizing",
    "href": "W4.html#grouping-summarizing-visualizing",
    "title": "W#4 Data import, data wrangling",
    "section": "Grouping, summarizing, visualizing",
    "text": "Grouping, summarizing, visualizing\n\nhotels |>\n  group_by(hotel, arrival_date_week_number) |>\n  summarise(mean_adr = mean(adr)) |> \n  ggplot(aes(x = arrival_date_week_number, y = mean_adr, color = hotel)) +\n  geom_line()"
  },
  {
    "objectID": "W4.html#some-advice-for-the-homework-of-starting-projects",
    "href": "W4.html#some-advice-for-the-homework-of-starting-projects",
    "title": "W#4 Data Wrangling",
    "section": "Some advice for the homework of starting projects",
    "text": "Some advice for the homework of starting projects\n\nData search\n\nAny insights about corona data?\n\nStarting a new quarto markdown document\n\nWhat to write into the YAML?\n\nData import"
  },
  {
    "objectID": "W4.html#resources",
    "href": "W4.html#resources",
    "title": "W#4 Data import, data wrangling",
    "section": "Resources",
    "text": "Resources\n\nFor systemic understanding: Learning resources linked in the syllabus\n\nR for Data Science\n\nChapters 3, 5, 9 (short), 10 (short), 11\n\nCorresponding chapters in Python Data Science Handbook\n\nFor quick overview to get inpiration\n\nCheatsheets (find some in RStudio -> Help, other by google)\n\nggplot2 Cheatsheet\ndplyr Cheatsheet\n\n\nFor detailed help with a function\n\nHelp file of the function ?FUNCTION-NAME, or search box in Help tab\nReference page on the package webpage"
  },
  {
    "objectID": "W4.html#questions-and-advice-for-the-homework-of-starting-projects",
    "href": "W4.html#questions-and-advice-for-the-homework-of-starting-projects",
    "title": "W#4 Data import, data wrangling",
    "section": "Questions and advice for the homework of starting projects",
    "text": "Questions and advice for the homework of starting projects\n\nData search\n\nAny insights about corona data?\n\nStarting a new quarto markdown document\n\nWhat to write into the YAML?\n\nData import\n\nExpect that some customization is needed!\n\nFirst graph\n\nYou are encouraged to play further!\nThese projects can be the seed for you Data Science Tools module project.\n\n\n\nJU-F22-MDSSB-DSCO-02: Data Science Concepts"
  },
  {
    "objectID": "index.html#week-4-sep-22-data-wrangling",
    "href": "index.html#week-4-sep-22-data-wrangling",
    "title": "Data Science Concepts / Tools",
    "section": "3.1 Week 4, Sep 22: Data Wrangling",
    "text": "3.1 Week 4, Sep 22: Data Wrangling\nSlides Week 3"
  },
  {
    "objectID": "index.html#week-4-sep-22-data-import-data-wrangling",
    "href": "index.html#week-4-sep-22-data-import-data-wrangling",
    "title": "Data Science Concepts / Tools",
    "section": "Week 4, Sep 22: Data import, data Wrangling",
    "text": "Week 4, Sep 22: Data import, data Wrangling\nSlides Week 4\nIncluding some recap of the toolkit.\nQuestions and advice on Homework 02 (mostly in Recording)."
  },
  {
    "objectID": "index.html#week-5-sep-29-relational-data-exploratory-data-analysis-asking-questions",
    "href": "index.html#week-5-sep-29-relational-data-exploratory-data-analysis-asking-questions",
    "title": "Data Science Concepts / Tools",
    "section": "Week 5, Sep 29: Relational Data, Exploratory Data Analysis, Asking Questions",
    "text": "Week 5, Sep 29: Relational Data, Exploratory Data Analysis, Asking Questions\nShall also cover a brief introduction to some dangling topics: Missing values, factors, strings, date and time.\nHomework 02 due next Sunday. Homework 03 comes (or will be close to come)."
  },
  {
    "objectID": "W4.html#back-to-hotel-data-first-look",
    "href": "W4.html#back-to-hotel-data-first-look",
    "title": "W#4 Data import, data wrangling",
    "section": "Back to hotel data: First look",
    "text": "Back to hotel data: First look\n\nhotels<- read_csv(\"data/hotels.csv\")\n\n\nFirst look on variables names\n\nnames(hotels)\n\n\n\n [1] \"hotel\"                          \"is_canceled\"                   \n [3] \"lead_time\"                      \"arrival_date_year\"             \n [5] \"arrival_date_month\"             \"arrival_date_week_number\"      \n [7] \"arrival_date_day_of_month\"      \"stays_in_weekend_nights\"       \n [9] \"stays_in_week_nights\"           \"adults\"                        \n[11] \"children\"                       \"babies\"                        \n[13] \"meal\"                           \"country\"                       \n[15] \"market_segment\"                 \"distribution_channel\"          \n[17] \"is_repeated_guest\"              \"previous_cancellations\"        \n[19] \"previous_bookings_not_canceled\" \"reserved_room_type\"            \n[21] \"assigned_room_type\"             \"booking_changes\"               \n[23] \"deposit_type\"                   \"agent\"                         \n[25] \"company\"                        \"days_in_waiting_list\"          \n[27] \"customer_type\"                  \"adr\"                           \n[29] \"required_car_parking_spaces\"    \"total_of_special_requests\"     \n[31] \"reservation_status\"             \"reservation_status_date\"       \n\n\n\nTo download the data you can use in R: download.file(\"https://raw.githubusercontent.com/rstudio-education/datascience-box/main/course-materials/_slides/u2-d06-grammar-wrangle/data/hotels.csv\", \"data/hotels.csv\")"
  },
  {
    "objectID": "W4.html#unique-combinations-arranging",
    "href": "W4.html#unique-combinations-arranging",
    "title": "W#4 Data import, data wrangling",
    "section": "Unique combinations, arranging",
    "text": "Unique combinations, arranging\ndistinct and arrange\n\nhotels |> \n  distinct(hotel, market_segment) |> \n  arrange(hotel, market_segment)\n\n\n\n# A tibble: 14 × 2\n   hotel        market_segment\n   <chr>        <chr>         \n 1 City Hotel   Aviation      \n 2 City Hotel   Complementary \n 3 City Hotel   Corporate     \n 4 City Hotel   Direct        \n 5 City Hotel   Groups        \n 6 City Hotel   Offline TA/TO \n 7 City Hotel   Online TA     \n 8 City Hotel   Undefined     \n 9 Resort Hotel Complementary \n10 Resort Hotel Corporate     \n11 Resort Hotel Direct        \n12 Resort Hotel Groups        \n13 Resort Hotel Offline TA/TO \n14 Resort Hotel Online TA"
  },
  {
    "objectID": "hw-instructions/hw-03-instr.html",
    "href": "hw-instructions/hw-03-instr.html",
    "title": "Homework 03",
    "section": "",
    "text": "The goal of this assignment is to do steps of exploratory data analysis (EDA) with the data about corona and the European Social Survey (ESS) from Homework 02."
  },
  {
    "objectID": "W5.html#named-vectors",
    "href": "W5.html#named-vectors",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Named vectors",
    "text": "Named vectors\nAll types of vectors can be named upon creation\n\nc(Num1 = 4, Second = 7, Last = 8)\n\n\n\n  Num1 Second   Last \n     4      7      8 \n\n\n\nor names can be set afterward.\n\nx <- 1:4\ny <- set_names(x, c(\"a\",\"b\",\"c\",\"d\"))\ny\n\n\n\na b c d \n1 2 3 4 \n\n\n\n\nNamed vectors can be used for subsetting.\n\ny[c(\"b\",\"d\")]\n\n\n\nb d \n2 4"
  },
  {
    "objectID": "W5.html#reminder-indexing-and-vectorized-thinking",
    "href": "W5.html#reminder-indexing-and-vectorized-thinking",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Reminder: Indexing and vectorized thinking",
    "text": "Reminder: Indexing and vectorized thinking\n\nx <- set_names(1:10,LETTERS[1:10])\nx\n\n\n\n A  B  C  D  E  F  G  H  I  J \n 1  2  3  4  5  6  7  8  9 10 \n\n\n\n\nx[c(4,2,1,1,1,1,4,1,5)]\n\n\n\nD B A A A A D A E \n4 2 1 1 1 1 4 1 5 \n\n\n\n\nRemoving with negative index numbers.\n\nx[c(-3,-5,-2)]\n\n\n\n A  D  F  G  H  I  J \n 1  4  6  7  8  9 10 \n\n\n\n\nMixing does not work.\nx[c(-3,1)]  # Will throw an error"
  },
  {
    "objectID": "W5.html#r-objects-can-have-attributes",
    "href": "W5.html#r-objects-can-have-attributes",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "R objects can have attributes",
    "text": "R objects can have attributes\nIn a named vector, the names are an attribute.\n\nx\n\n A  B  C  D  E  F  G  H  I  J \n 1  2  3  4  5  6  7  8  9 10 \n\nattributes(x)\n\n$names\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\n\n\nAttributes can be assigned freely.\n\nattr(x, \"SayHi\") <- \"Hi\"\nattr(x, \"SayBye\") <- \"Bye\"\nattributes(x)\n\n\n\n$names\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\n$SayHi\n[1] \"Hi\"\n\n$SayBye\n[1] \"Bye\""
  },
  {
    "objectID": "W5.html#attributes-in-specification-of-data-structures.",
    "href": "W5.html#attributes-in-specification-of-data-structures.",
    "title": "W#5 Relational Data, Exploratory Data Analysis, …",
    "section": "Attributes in specification of data structures.",
    "text": "Attributes in specification of data structures.\nA bare atomic vector has no attributes\n\nx <- 1:10\nattributes(x)\n\n\n\nNULL\n\n\nNULL represents the Null object # Missing Values"
  },
  {
    "objectID": "W5.html#attributes-in-data-structures",
    "href": "W5.html#attributes-in-data-structures",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Attributes in data structures",
    "text": "Attributes in data structures\n\nlibrary(nycflights13)\nattributes(airports)\n\n\n\n$class\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n$row.names\n   [1]    1    2    3    4    5    6    7    8    9   10   11   12   13   14\n  [15]   15   16   17   18   19   20   21   22   23   24   25   26   27   28\n  [29]   29   30   31   32   33   34   35   36   37   38   39   40   41   42\n  [43]   43   44   45   46   47   48   49   50   51   52   53   54   55   56\n  [57]   57   58   59   60   61   62   63   64   65   66   67   68   69   70\n  [71]   71   72   73   74   75   76   77   78   79   80   81   82   83   84\n  [85]   85   86   87   88   89   90   91   92   93   94   95   96   97   98\n  [99]   99  100  101  102  103  104  105  106  107  108  109  110  111  112\n [113]  113  114  115  116  117  118  119  120  121  122  123  124  125  126\n [127]  127  128  129  130  131  132  133  134  135  136  137  138  139  140\n [141]  141  142  143  144  145  146  147  148  149  150  151  152  153  154\n [155]  155  156  157  158  159  160  161  162  163  164  165  166  167  168\n [169]  169  170  171  172  173  174  175  176  177  178  179  180  181  182\n [183]  183  184  185  186  187  188  189  190  191  192  193  194  195  196\n [197]  197  198  199  200  201  202  203  204  205  206  207  208  209  210\n [211]  211  212  213  214  215  216  217  218  219  220  221  222  223  224\n [225]  225  226  227  228  229  230  231  232  233  234  235  236  237  238\n [239]  239  240  241  242  243  244  245  246  247  248  249  250  251  252\n [253]  253  254  255  256  257  258  259  260  261  262  263  264  265  266\n [267]  267  268  269  270  271  272  273  274  275  276  277  278  279  280\n [281]  281  282  283  284  285  286  287  288  289  290  291  292  293  294\n [295]  295  296  297  298  299  300  301  302  303  304  305  306  307  308\n [309]  309  310  311  312  313  314  315  316  317  318  319  320  321  322\n [323]  323  324  325  326  327  328  329  330  331  332  333  334  335  336\n [337]  337  338  339  340  341  342  343  344  345  346  347  348  349  350\n [351]  351  352  353  354  355  356  357  358  359  360  361  362  363  364\n [365]  365  366  367  368  369  370  371  372  373  374  375  376  377  378\n [379]  379  380  381  382  383  384  385  386  387  388  389  390  391  392\n [393]  393  394  395  396  397  398  399  400  401  402  403  404  405  406\n [407]  407  408  409  410  411  412  413  414  415  416  417  418  419  420\n [421]  421  422  423  424  425  426  427  428  429  430  431  432  433  434\n [435]  435  436  437  438  439  440  441  442  443  444  445  446  447  448\n [449]  449  450  451  452  453  454  455  456  457  458  459  460  461  462\n [463]  463  464  465  466  467  468  469  470  471  472  473  474  475  476\n [477]  477  478  479  480  481  482  483  484  485  486  487  488  489  490\n [491]  491  492  493  494  495  496  497  498  499  500  501  502  503  504\n [505]  505  506  507  508  509  510  511  512  513  514  515  516  517  518\n [519]  519  520  521  522  523  524  525  526  527  528  529  530  531  532\n [533]  533  534  535  536  537  538  539  540  541  542  543  544  545  546\n [547]  547  548  549  550  551  552  553  554  555  556  557  558  559  560\n [561]  561  562  563  564  565  566  567  568  569  570  571  572  573  574\n [575]  575  576  577  578  579  580  581  582  583  584  585  586  587  588\n [589]  589  590  591  592  593  594  595  596  597  598  599  600  601  602\n [603]  603  604  605  606  607  608  609  610  611  612  613  614  615  616\n [617]  617  618  619  620  621  622  623  624  625  626  627  628  629  630\n [631]  631  632  633  634  635  636  637  638  639  640  641  642  643  644\n [645]  645  646  647  648  649  650  651  652  653  654  655  656  657  658\n [659]  659  660  661  662  663  664  665  666  667  668  669  670  671  672\n [673]  673  674  675  676  677  678  679  680  681  682  683  684  685  686\n [687]  687  688  689  690  691  692  693  694  695  696  697  698  699  700\n [701]  701  702  703  704  705  706  707  708  709  710  711  712  713  714\n [715]  715  716  717  718  719  720  721  722  723  724  725  726  727  728\n [729]  729  730  731  732  733  734  735  736  737  738  739  740  741  742\n [743]  743  744  745  746  747  748  749  750  751  752  753  754  755  756\n [757]  757  758  759  760  761  762  763  764  765  766  767  768  769  770\n [771]  771  772  773  774  775  776  777  778  779  780  781  782  783  784\n [785]  785  786  787  788  789  790  791  792  793  794  795  796  797  798\n [799]  799  800  801  802  803  804  805  806  807  808  809  810  811  812\n [813]  813  814  815  816  817  818  819  820  821  822  823  824  825  826\n [827]  827  828  829  830  831  832  833  834  835  836  837  838  839  840\n [841]  841  842  843  844  845  846  847  848  849  850  851  852  853  854\n [855]  855  856  857  858  859  860  861  862  863  864  865  866  867  868\n [869]  869  870  871  872  873  874  875  876  877  878  879  880  881  882\n [883]  883  884  885  886  887  888  889  890  891  892  893  894  895  896\n [897]  897  898  899  900  901  902  903  904  905  906  907  908  909  910\n [911]  911  912  913  914  915  916  917  918  919  920  921  922  923  924\n [925]  925  926  927  928  929  930  931  932  933  934  935  936  937  938\n [939]  939  940  941  942  943  944  945  946  947  948  949  950  951  952\n [953]  953  954  955  956  957  958  959  960  961  962  963  964  965  966\n [967]  967  968  969  970  971  972  973  974  975  976  977  978  979  980\n [981]  981  982  983  984  985  986  987  988  989  990  991  992  993  994\n [995]  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008\n[1009] 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022\n[1023] 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036\n[1037] 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050\n[1051] 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064\n[1065] 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078\n[1079] 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092\n[1093] 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106\n[1107] 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120\n[1121] 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134\n[1135] 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148\n[1149] 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162\n[1163] 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176\n[1177] 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190\n[1191] 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204\n[1205] 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218\n[1219] 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232\n[1233] 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246\n[1247] 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260\n[1261] 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274\n[1275] 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288\n[1289] 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302\n[1303] 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316\n[1317] 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330\n[1331] 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344\n[1345] 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358\n[1359] 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372\n[1373] 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386\n[1387] 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400\n[1401] 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414\n[1415] 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428\n[1429] 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442\n[1443] 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456\n[1457] 1457 1458\n\n$spec\ncols(\n  id = col_double(),\n  name = col_character(),\n  city = col_character(),\n  country = col_character(),\n  faa = col_character(),\n  icao = col_character(),\n  lat = col_double(),\n  lon = col_double(),\n  alt = col_double(),\n  tz = col_double(),\n  dst = col_character(),\n  tzone = col_character()\n)\n\n$names\n[1] \"faa\"   \"name\"  \"lat\"   \"lon\"   \"alt\"   \"tz\"    \"dst\"   \"tzone\""
  },
  {
    "objectID": "W5.html#three-important-attributes",
    "href": "W5.html#three-important-attributes",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Three important attributes",
    "text": "Three important attributes\n\nNames are used to name element of a vector (counting also lists as vectors and therefore also data frames as lists of atomic vectors of the same length)\nDimensions (dim()) is a short numeric vector making a vector behave as a matrix or a higher dimensional array. A vector 1:6 together with dim being c(2,3) is a matrix with 2 rows and 3 columns\n\\(\\begin{bmatrix} 1 & 3 & 5 \\\\ 2 & 4 & 6 \\end{bmatrix}\\)\nClass is used to implement the S3 object oriented system. We don’t need to know the details here. The class system makes it for example possible that the same function, e.g. print() behaves differently for objects of different a different class.\n\nClass plays a role in specifying augmented vectors like factors, dates, date-times, or tibbles."
  },
  {
    "objectID": "W5.html#factors",
    "href": "W5.html#factors",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Factors",
    "text": "Factors\nR uses factors to handle categorical variables, variables that have a fixed and known set of possible values\n\nx <- factor(c(\"BS\", \"MS\", \"PhD\", \"MS\", \"BS\", \"BS\"))\nx\n\n\n\n[1] BS  MS  PhD MS  BS  BS \nLevels: BS MS PhD\n\n\n\nTechnically, a factor is vector of integers with a levels attribute which specifies the categories for the integers.\n\ntypeof(x)\n\n[1] \"integer\"\n\nas.integer(x)\n\n[1] 1 2 3 2 1 1\n\nattributes(x)\n\n$levels\n[1] \"BS\"  \"MS\"  \"PhD\"\n\n$class\n[1] \"factor\"\n\n\n\n\nThe class factor makes R print the level of each element of the vector instead of the underlying integer."
  },
  {
    "objectID": "W5.html#section",
    "href": "W5.html#section",
    "title": "W#5 Relational Data, Exploratory Data Analysis, …",
    "section": "",
    "text": "A bare atomic vector has no attributes\n\nx <- 1:10\nattributes(x)\n\n\n\nNULL\n\n\nNULL represents the Null object # Missing Values"
  },
  {
    "objectID": "W5.html#factors-for-data-visualization",
    "href": "W5.html#factors-for-data-visualization",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Factors for data visualization",
    "text": "Factors for data visualization\nWe manipulate factors with functions from the forcats package of the tidyverse core.\n\nPlotReverseOrder by frequencyRegroup\n\n\n\nmpg |> ggplot(aes(y = manufacturer)) + geom_bar()\n\n\n\n\n\n\n\nmpg |> ggplot(aes(y = fct_rev(manufacturer))) + geom_bar()\n\n\n\n\n\n\n\nmpg |> ggplot(aes(y = fct_rev(fct_infreq(manufacturer)))) + geom_bar()\n\n\n\n\n\n\n\nmpg |> ggplot(aes(y = fct_other(manufacturer, keep = c(\"dodge\", \"toyota\", \"volkswagen\")))) + geom_bar()"
  },
  {
    "objectID": "W5.html#dates",
    "href": "W5.html#dates",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Dates",
    "text": "Dates\n\nISO 8601 standard for dates: YYYY-MM-DD. Today: 2022-10-01.\nDates in R are numeric vectors that represent the number of days since 1 January 1970.\n\n\ny <- as.Date(\"2020-01-01\"); y\n\n[1] \"2020-01-01\"\n\ntypeof(y)\n\n[1] \"double\"\n\nattributes(y)\n\n$class\n[1] \"Date\"\n\nas.double(y)\n\n[1] 18262\n\nas.double(as.Date(\"1970-01-01\"))\n\n[1] 0\n\nas.double(as.Date(\"1969-01-01\"))\n\n[1] -365"
  },
  {
    "objectID": "W5.html#date-times",
    "href": "W5.html#date-times",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Date-times",
    "text": "Date-times\nFor date-time manipulation use lubridate form the tidyverse. Not in the core so it has to be loaded.1\n\nx <- lubridate::ymd_hm(\"1970-01-01 01:00\")\nx\n\n[1] \"1970-01-01 01:00:00 UTC\"\n\nattributes(x)\n\n$class\n[1] \"POSIXct\" \"POSIXt\" \n\n$tzone\n[1] \"UTC\"\n\nas.double(x)\n\n[1] 3600\n\n\nUTC: Coordinated Universal Time. We are in the UTC+1 timezone.\nPOSIXct: Portable Operating System Interface, calendar time. Stores date and time in seconds with the number of seconds beginning at 1 January 1970.\nInstead of loading package pack to use its function func you can also write pack::func all the time. This works when the package is installed even when not loaded."
  },
  {
    "objectID": "W5.html#more-about",
    "href": "W5.html#more-about",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "More about …",
    "text": "More about …\n\nFactors: R for Data Science Chapter 15\nDates and times: R for Data Science Chapter 16"
  },
  {
    "objectID": "W5.html#string-modification",
    "href": "W5.html#string-modification",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "String modification",
    "text": "String modification\nWe modify strings with the stringr package from the tidyverse core.\nAll functions from stringr start with str_.\nVery few examples:\n\nc(\"x\",\"y\")\n\n[1] \"x\" \"y\"\n\nstr_c(\"x\",\"y\")\n\n[1] \"xy\"\n\nstr_c(\"x\",\"y\",\"z\", sep=\",\")\n\n[1] \"x,y,z\"\n\nlength(c(\"x\",\"y\",\"z\"))\n\n[1] 3\n\nstr_length(c(\"x\",\"y\",\"z\"))\n\n[1] 1 1 1\n\nstr_length(c(\"This is a string.\",\"z\"))\n\n[1] 17  1"
  },
  {
    "objectID": "W5.html#strings-modification-with-variable-names",
    "href": "W5.html#strings-modification-with-variable-names",
    "title": "W#5 Relational Data, Exploratory Data Analysis, …",
    "section": "Strings modification with variable names",
    "text": "Strings modification with variable names\n\ndata <- tibble(Name = c(\"A\",\"B\",\"C\"), Age_2020 = c(20,30,40), Age_2021 = c(21,31,41), Age_2022 = c(22,32,42))\ndata\n\n# A tibble: 3 × 4\n  Name  Age_2020 Age_2021 Age_2022\n  <chr>    <dbl>    <dbl>    <dbl>\n1 A           20       21       22\n2 B           30       31       32\n3 C           40       41       42\n\n\nWe tidy that data set by creating a year variable.\n\n\ndata |> pivot_longer(c(\"Age_2020\", \"Age_2021\", \"Age_2022\"), names_to = \"Year\", values_to=\"Age\")\n\n\n\n# A tibble: 9 × 3\n  Name  Year       Age\n  <chr> <chr>    <dbl>\n1 A     Age_2020    20\n2 A     Age_2021    21\n3 A     Age_2022    22\n4 B     Age_2020    30\n5 B     Age_2021    31\n6 B     Age_2022    32\n7 C     Age_2020    40\n8 C     Age_2021    41\n9 C     Age_2022    42\n\n\n\n\nOK, but the year variable is a string but we want numbers."
  },
  {
    "objectID": "W5.html#string-detection-and-regular-expressions",
    "href": "W5.html#string-detection-and-regular-expressions",
    "title": "W#5 Relational Data, Exploratory Data Analysis, …",
    "section": "String detection and regular expressions",
    "text": "String detection and regular expressions\nMore on Strings: R for Data Science Chapter 14"
  },
  {
    "objectID": "W5.html#string-wrangling-with-variable-names",
    "href": "W5.html#string-wrangling-with-variable-names",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "String wrangling with variable names",
    "text": "String wrangling with variable names\n\ndata <- tibble(Name = c(\"A\",\"B\",\"C\"), Age_2020 = c(20,30,40), Age_2021 = c(21,31,41), Age_2022 = c(22,32,42))\ndata\n\n# A tibble: 3 × 4\n  Name  Age_2020 Age_2021 Age_2022\n  <chr>    <dbl>    <dbl>    <dbl>\n1 A           20       21       22\n2 B           30       31       32\n3 C           40       41       42\n\n\nWe tidy that data set by creating a year variable.\n\n\ndata |> pivot_longer(c(\"Age_2020\", \"Age_2021\", \"Age_2022\"), names_to = \"Year\", values_to=\"Age\")\n\n\n\n# A tibble: 9 × 3\n  Name  Year       Age\n  <chr> <chr>    <dbl>\n1 A     Age_2020    20\n2 A     Age_2021    21\n3 A     Age_2022    22\n4 B     Age_2020    30\n5 B     Age_2021    31\n6 B     Age_2022    32\n7 C     Age_2020    40\n8 C     Age_2021    41\n9 C     Age_2022    42\n\n\n\n\nOK, but the year variable is a string but we want numbers."
  },
  {
    "objectID": "W5.html#use-word",
    "href": "W5.html#use-word",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Use word",
    "text": "Use word\nword extracts words from a sentence. However, the separator need not be \" \" but can be any character.\n\nword(\"This is a string.\", start=2, end=-2) \n\n[1] \"is a\"\n\n#Selects from the second to the second last word.\nword(\"Age_2022\", start=2, sep = \"_\")\n\n[1] \"2022\"\n\n\n\nIt also works vectorized.\n\ndata |> pivot_longer(c(\"Age_2020\", \"Age_2021\", \"Age_2022\"), names_to = \"Year\", values_to=\"Age\") |> \n  mutate(Year = word(Year, start = 2, sep = \"_\") |> as.numeric())\n\n\n\n# A tibble: 9 × 3\n  Name   Year   Age\n  <chr> <dbl> <dbl>\n1 A      2020    20\n2 A      2021    21\n3 A      2022    22\n4 B      2020    30\n5 B      2021    31\n6 B      2022    32\n7 C      2020    40\n8 C      2021    41\n9 C      2022    42\n\n\n… More on strings and regular expressions: R for Data Science Chapter 14"
  },
  {
    "objectID": "W5.html#working-with-more-data-frames",
    "href": "W5.html#working-with-more-data-frames",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Working with more data frames",
    "text": "Working with more data frames\n\nData can be distributed in several data frames which have relations which each other.\nFor example, they share variables as the five data frames in nycflights13.\n\n\n\n\nOften variables in different data frame have the same name, but that need not be the case! See the variable faa in airports matches origin and dest in flights."
  },
  {
    "objectID": "W5.html#data-women-in-science",
    "href": "W5.html#data-women-in-science",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Data: Women in science",
    "text": "Data: Women in science\n10 women in science who changed the world: Ada Lovelace, Marie Curie, Janaki Ammal, Chien-Shiung Wu, Katherine Johnson, Rosalind Franklin, Vera Rubin, Gladys West, Flossie Wong-Staal, Jennifer Doudna\n\n\n\n\nProfessionsDatesWorks\n\n\n\nprofessions <- read_csv(\"data/scientists/professions.csv\")\nprofessions\n\n# A tibble: 10 × 2\n   name               profession                        \n   <chr>              <chr>                             \n 1 Ada Lovelace       Mathematician                     \n 2 Marie Curie        Physicist and Chemist             \n 3 Janaki Ammal       Botanist                          \n 4 Chien-Shiung Wu    Physicist                         \n 5 Katherine Johnson  Mathematician                     \n 6 Rosalind Franklin  Chemist                           \n 7 Vera Rubin         Astronomer                        \n 8 Gladys West        Mathematician                     \n 9 Flossie Wong-Staal Virologist and Molecular Biologist\n10 Jennifer Doudna    Biochemist                        \n\n\n\n\n\ndates <- read_csv(\"data/scientists/dates.csv\")\ndates\n\n# A tibble: 8 × 3\n  name               birth_year death_year\n  <chr>                   <dbl>      <dbl>\n1 Janaki Ammal             1897       1984\n2 Chien-Shiung Wu          1912       1997\n3 Katherine Johnson        1918       2020\n4 Rosalind Franklin        1920       1958\n5 Vera Rubin               1928       2016\n6 Gladys West              1930         NA\n7 Flossie Wong-Staal       1947         NA\n8 Jennifer Doudna          1964         NA\n\n\n\n\n\nworks <- read_csv(\"data/scientists/works.csv\")\nworks\n\n# A tibble: 9 × 2\n  name               known_for                                                  \n  <chr>              <chr>                                                      \n1 Ada Lovelace       first computer algorithm                                   \n2 Marie Curie        theory of radioactivity,  discovery of elements polonium a…\n3 Janaki Ammal       hybrid species, biodiversity protection                    \n4 Chien-Shiung Wu    confim and refine theory of radioactive beta decy, Wu expe…\n5 Katherine Johnson  calculations of orbital mechanics critical to sending the …\n6 Vera Rubin         existence of dark matter                                   \n7 Gladys West        mathematical modeling of the shape of the Earth which serv…\n8 Flossie Wong-Staal first scientist to clone HIV and create a map of its genes…\n9 Jennifer Doudna    one of the primary developers of CRISPR, a ground-breaking…\n\n\n\n\n\n\n\nSource: Discover Magazine\nThe data can be downloaded: professions.csv, dates.csv, works.csv"
  },
  {
    "objectID": "W5.html#data",
    "href": "W5.html#data",
    "title": "W#5 Relational Data, Exploratory Data Analysis, …",
    "section": "Data",
    "text": "Data"
  },
  {
    "objectID": "W5.html#we-want-this-data-frame",
    "href": "W5.html#we-want-this-data-frame",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "We want this data frame",
    "text": "We want this data frame\n\n\n# A tibble: 10 × 5\n   name               profession                         birth…¹ death…² known…³\n   <chr>              <chr>                                <dbl>   <dbl> <chr>  \n 1 Ada Lovelace       Mathematician                           NA      NA first …\n 2 Marie Curie        Physicist and Chemist                   NA      NA theory…\n 3 Janaki Ammal       Botanist                              1897    1984 hybrid…\n 4 Chien-Shiung Wu    Physicist                             1912    1997 confim…\n 5 Katherine Johnson  Mathematician                         1918    2020 calcul…\n 6 Rosalind Franklin  Chemist                               1920    1958 <NA>   \n 7 Vera Rubin         Astronomer                            1928    2016 existe…\n 8 Gladys West        Mathematician                         1930      NA mathem…\n 9 Flossie Wong-Staal Virologist and Molecular Biologist    1947      NA first …\n10 Jennifer Doudna    Biochemist                            1964      NA one of…\n# … with abbreviated variable names ¹​birth_year, ²​death_year, ³​known_for"
  },
  {
    "objectID": "W5.html#joining-data-frames",
    "href": "W5.html#joining-data-frames",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Joining data frames",
    "text": "Joining data frames\nsomething_join(x, y)^{The notion join comes from SQL database. In other data manipulation frameworks joining is called merging.} for data frames x and y which have a relation\n\nleft_join(): all rows from x\nright_join(): all rows from y\nfull_join(): all rows from both x and y\ninner_join(): all rows from x where there are matching values in y, return all combination of multiple matches in the case of multiple matches\n…"
  },
  {
    "objectID": "W5.html#keys",
    "href": "W5.html#keys",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Keys",
    "text": "Keys\n\nA key is a variable or a set of variables which uniquely identifies observations\nWhat was the key in the data frame of women in science?\n\n\n\nSwitching back to nycflights13 as example\nIn simple cases, a single variable is sufficient to identify an observation, e.g. each plane in planes is identified by tailnum.\nSometimes, multiple variables are needed; e.g. to identify an observation in weather you need five variables: year, month, day, hour, and origin"
  },
  {
    "objectID": "W5.html#simple-setup",
    "href": "W5.html#simple-setup",
    "title": "W#5 Relational Data, Exploratory Data Analysis, …",
    "section": "Simple setup",
    "text": "Simple setup\n\nx <- tibble(\n  id = c(1, 2, 3),\n  value_x = c(\"x1\", \"x2\", \"x3\")\n  )\ny <- tibble(\n  id = c(1, 2, 4),\n  value_y = c(\"y1\", \"y2\", \"y4\")\n  )\nx\n\n# A tibble: 3 × 2\n     id value_x\n  <dbl> <chr>  \n1     1 x1     \n2     2 x2     \n3     3 x3     \n\ny\n\n# A tibble: 3 × 2\n     id value_y\n  <dbl> <chr>  \n1     1 y1     \n2     2 y2     \n3     4 y4"
  },
  {
    "objectID": "W5.html#simple-setup-for-x-and-y",
    "href": "W5.html#simple-setup-for-x-and-y",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Simple setup for x and y",
    "text": "Simple setup for x and y\n\nx <- tibble(\n  id = c(1, 2, 3),\n  value_x = c(\"x1\", \"x2\", \"x3\")\n  )\ny <- tibble(\n  id = c(1, 2, 4),\n  value_y = c(\"y1\", \"y2\", \"y4\")\n  )\nx\n\n# A tibble: 3 × 2\n     id value_x\n  <dbl> <chr>  \n1     1 x1     \n2     2 x2     \n3     3 x3     \n\ny\n\n# A tibble: 3 × 2\n     id value_y\n  <dbl> <chr>  \n1     1 y1     \n2     2 y2     \n3     4 y4"
  },
  {
    "objectID": "W5.html#left_join",
    "href": "W5.html#left_join",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "left_join()",
    "text": "left_join()\n\n\n\n\n\nleft_join(x, y)\n\n# A tibble: 3 × 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2     \n3     3 x3      <NA>"
  },
  {
    "objectID": "W5.html#right_join",
    "href": "W5.html#right_join",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "right_join()",
    "text": "right_join()\n\n\n\n\n\nright_join(x, y)\n\n# A tibble: 3 × 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2     \n3     4 <NA>    y4"
  },
  {
    "objectID": "W5.html#full_join",
    "href": "W5.html#full_join",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "full_join()",
    "text": "full_join()\n\n\n\n\n\nfull_join(x, y)\n\n# A tibble: 4 × 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2     \n3     3 x3      <NA>   \n4     4 <NA>    y4"
  },
  {
    "objectID": "W5.html#inner_join",
    "href": "W5.html#inner_join",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "inner_join()",
    "text": "inner_join()\n\n\n\n\n\ninner_join(x, y)\n\n# A tibble: 2 × 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2"
  },
  {
    "objectID": "W5.html#women-in-science",
    "href": "W5.html#women-in-science",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Women in science",
    "text": "Women in science\n\nleft_joinright_joinfull_joininner_joinFinal\n\n\n\nprofessions |> left_join(works)\n\n# A tibble: 10 × 3\n   name               profession                         known_for              \n   <chr>              <chr>                              <chr>                  \n 1 Ada Lovelace       Mathematician                      first computer algorit…\n 2 Marie Curie        Physicist and Chemist              theory of radioactivit…\n 3 Janaki Ammal       Botanist                           hybrid species, biodiv…\n 4 Chien-Shiung Wu    Physicist                          confim and refine theo…\n 5 Katherine Johnson  Mathematician                      calculations of orbita…\n 6 Rosalind Franklin  Chemist                            <NA>                   \n 7 Vera Rubin         Astronomer                         existence of dark matt…\n 8 Gladys West        Mathematician                      mathematical modeling …\n 9 Flossie Wong-Staal Virologist and Molecular Biologist first scientist to clo…\n10 Jennifer Doudna    Biochemist                         one of the primary dev…\n\n\n\n\n\nprofessions |> right_join(works)\n\n# A tibble: 9 × 3\n  name               profession                         known_for               \n  <chr>              <chr>                              <chr>                   \n1 Ada Lovelace       Mathematician                      first computer algorithm\n2 Marie Curie        Physicist and Chemist              theory of radioactivity…\n3 Janaki Ammal       Botanist                           hybrid species, biodive…\n4 Chien-Shiung Wu    Physicist                          confim and refine theor…\n5 Katherine Johnson  Mathematician                      calculations of orbital…\n6 Vera Rubin         Astronomer                         existence of dark matter\n7 Gladys West        Mathematician                      mathematical modeling o…\n8 Flossie Wong-Staal Virologist and Molecular Biologist first scientist to clon…\n9 Jennifer Doudna    Biochemist                         one of the primary deve…\n\n\n\n\n\ndates |> full_join(works)\n\n# A tibble: 10 × 4\n   name               birth_year death_year known_for                           \n   <chr>                   <dbl>      <dbl> <chr>                               \n 1 Janaki Ammal             1897       1984 hybrid species, biodiversity protec…\n 2 Chien-Shiung Wu          1912       1997 confim and refine theory of radioac…\n 3 Katherine Johnson        1918       2020 calculations of orbital mechanics c…\n 4 Rosalind Franklin        1920       1958 <NA>                                \n 5 Vera Rubin               1928       2016 existence of dark matter            \n 6 Gladys West              1930         NA mathematical modeling of the shape …\n 7 Flossie Wong-Staal       1947         NA first scientist to clone HIV and cr…\n 8 Jennifer Doudna          1964         NA one of the primary developers of CR…\n 9 Ada Lovelace               NA         NA first computer algorithm            \n10 Marie Curie                NA         NA theory of radioactivity,  discovery…\n\n\n\n\n\ndates |> inner_join(works)\n\n# A tibble: 7 × 4\n  name               birth_year death_year known_for                            \n  <chr>                   <dbl>      <dbl> <chr>                                \n1 Janaki Ammal             1897       1984 hybrid species, biodiversity protect…\n2 Chien-Shiung Wu          1912       1997 confim and refine theory of radioact…\n3 Katherine Johnson        1918       2020 calculations of orbital mechanics cr…\n4 Vera Rubin               1928       2016 existence of dark matter             \n5 Gladys West              1930         NA mathematical modeling of the shape o…\n6 Flossie Wong-Staal       1947         NA first scientist to clone HIV and cre…\n7 Jennifer Doudna          1964         NA one of the primary developers of CRI…\n\n\n\n\n\nprofessions |> left_join(dates) |> left_join(works)\n\n# A tibble: 10 × 5\n   name               profession                         birth…¹ death…² known…³\n   <chr>              <chr>                                <dbl>   <dbl> <chr>  \n 1 Ada Lovelace       Mathematician                           NA      NA first …\n 2 Marie Curie        Physicist and Chemist                   NA      NA theory…\n 3 Janaki Ammal       Botanist                              1897    1984 hybrid…\n 4 Chien-Shiung Wu    Physicist                             1912    1997 confim…\n 5 Katherine Johnson  Mathematician                         1918    2020 calcul…\n 6 Rosalind Franklin  Chemist                               1920    1958 <NA>   \n 7 Vera Rubin         Astronomer                            1928    2016 existe…\n 8 Gladys West        Mathematician                         1930      NA mathem…\n 9 Flossie Wong-Staal Virologist and Molecular Biologist    1947      NA first …\n10 Jennifer Doudna    Biochemist                            1964      NA one of…\n# … with abbreviated variable names ¹​birth_year, ²​death_year, ³​known_for"
  },
  {
    "objectID": "W5.html#how-can-we-check",
    "href": "W5.html#how-can-we-check",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "How can we check?",
    "text": "How can we check?\nCounting observation and filter those more than one\n\nlibrary(nycflights13)\nplanes |> count(tailnum) |> filter(n > 1)\n\n# A tibble: 0 × 2\n# … with 2 variables: tailnum <chr>, n <int>\n\nweather |> count(year, month, day, hour, origin) |> filter(n > 1) \n\n# A tibble: 3 × 6\n   year month   day  hour origin     n\n  <int> <int> <int> <int> <chr>  <int>\n1  2013    11     3     1 EWR        2\n2  2013    11     3     1 JFK        2\n3  2013    11     3     1 LGA        2\n\n# OK, here 3 observations are twice. Probably a data error.\n# Example: Without hour it is not a key\nweather |> count(year, month, day, origin) |> filter(n > 1) \n\n# A tibble: 1,092 × 5\n    year month   day origin     n\n   <int> <int> <int> <chr>  <int>\n 1  2013     1     1 EWR       22\n 2  2013     1     1 JFK       22\n 3  2013     1     1 LGA       23\n 4  2013     1     2 EWR       24\n 5  2013     1     2 JFK       24\n 6  2013     1     2 LGA       24\n 7  2013     1     3 EWR       24\n 8  2013     1     3 JFK       24\n 9  2013     1     3 LGA       24\n10  2013     1     4 EWR       24\n# … with 1,082 more rows"
  },
  {
    "objectID": "W5.html#primary-and-foreign-keys",
    "href": "W5.html#primary-and-foreign-keys",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Primary and foreign keys",
    "text": "Primary and foreign keys\n\nA primary key uniquely identifies an observation in its own table. E.g, planes$tailnum in planes.\nA foreign key uniquely identifies an observation in another data frame E.g. flights$tailnum is a foreign key in flights because it matches each flight to a unique plane in planes.\nData frames need not have a key and the joins will still do their work.\nA primary key and a foreign key form a relation.\nRelations are typically 1-to-many. Each plane has many flights\nRelations can also be many-to-many. Airlines can fly to many airports; airport can host many airplanes."
  },
  {
    "objectID": "W5.html#how-do-we-join-when-key-names-differ",
    "href": "W5.html#how-do-we-join-when-key-names-differ",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "How do we join when key names differ?",
    "text": "How do we join when key names differ?\nWe have to specify the key relation with a named vector in the by argument.\n\ndim(flights)\n\n[1] 336776     19\n\nflights |> left_join(airports, by = c(\"dest\" = \"faa\"))\n\n# A tibble: 336,776 × 26\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      517        515       2     830     819      11 UA     \n 2  2013     1     1      533        529       4     850     830      20 UA     \n 3  2013     1     1      542        540       2     923     850      33 AA     \n 4  2013     1     1      544        545      -1    1004    1022     -18 B6     \n 5  2013     1     1      554        600      -6     812     837     -25 DL     \n 6  2013     1     1      554        558      -4     740     728      12 UA     \n 7  2013     1     1      555        600      -5     913     854      19 B6     \n 8  2013     1     1      557        600      -3     709     723     -14 EV     \n 9  2013     1     1      557        600      -3     838     846      -8 B6     \n10  2013     1     1      558        600      -2     753     745       8 AA     \n# … with 336,766 more rows, 16 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, name <chr>, lat <dbl>, lon <dbl>,\n#   alt <dbl>, tz <dbl>, dst <chr>, tzone <chr>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\nWhy does the number of rows stays the same after joining?\n\nfaa is a primary key in airports."
  },
  {
    "objectID": "W5.html#left_join-is-essentially-same-as-right_join-with-switched-data-frames",
    "href": "W5.html#left_join-is-essentially-same-as-right_join-with-switched-data-frames",
    "title": "W#5 Relational Data, Exploratory Data Analysis, …",
    "section": "left_join is essentially same as right_join with switched data frames",
    "text": "left_join is essentially same as right_join with switched data frames\n\nairportsflights <- airports |> right_join(flights, by = c(\"faa\" = \"dest\"))\nairportsflights \n\n# A tibble: 336,776 × 26\n   faa   name        lat   lon   alt    tz dst   tzone  year month   day dep_t…¹\n   <chr> <chr>     <dbl> <dbl> <dbl> <dbl> <chr> <chr> <int> <int> <int>   <int>\n 1 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     1    1955\n 2 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     2    2010\n 3 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     3    1955\n 4 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     4    2017\n 5 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     5    1959\n 6 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     6    1959\n 7 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     7    2002\n 8 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     8    1957\n 9 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     9    1957\n10 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10    10    2011\n# … with 336,766 more rows, 14 more variables: sched_dep_time <int>,\n#   dep_delay <dbl>, arr_time <int>, sched_arr_time <int>, arr_delay <dbl>,\n#   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>, air_time <dbl>,\n#   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>, and abbreviated\n#   variable name ¹​dep_time\n\n\n\nDifferences\n\nIn a join with different variables names for the two keys the name of the first data frame survives (unless you use keep = TRUE). Here, faa instead of dest\nThe columns from the first data frame come first\nThe order of rows is taken from the first data frame, while duplication and dropping of variables is determined by the second data frame (because it is a right_join)\n\nUsing the fact that flights seem to be ordered by year, month, day, dep_time we can re-arrange:\n\nairportsflights |> \n  rename(dest = faa) |> \n  select(names(flights)) |> # Use order of flights\n  arrange(year, month, day, dep_time)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      517        515       2     830     819      11 UA     \n 2  2013     1     1      533        529       4     850     830      20 UA     \n 3  2013     1     1      542        540       2     923     850      33 AA     \n 4  2013     1     1      544        545      -1    1004    1022     -18 B6     \n 5  2013     1     1      554        600      -6     812     837     -25 DL     \n 6  2013     1     1      554        558      -4     740     728      12 UA     \n 7  2013     1     1      555        600      -5     913     854      19 B6     \n 8  2013     1     1      557        600      -3     709     723     -14 EV     \n 9  2013     1     1      557        600      -3     838     846      -8 B6     \n10  2013     1     1      558        600      -2     924     917       7 UA     \n# … with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay"
  },
  {
    "objectID": "W5.html#left_join-essentially-right_join-with-switched-data-frames",
    "href": "W5.html#left_join-essentially-right_join-with-switched-data-frames",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "left_join essentially right_join with switched data frames",
    "text": "left_join essentially right_join with switched data frames\n\nairports_right_flights <- airports |> right_join(flights, by = c(\"faa\" = \"dest\"))\nairports_right_flights \n\n# A tibble: 336,776 × 26\n   faa   name        lat   lon   alt    tz dst   tzone  year month   day dep_t…¹\n   <chr> <chr>     <dbl> <dbl> <dbl> <dbl> <chr> <chr> <int> <int> <int>   <int>\n 1 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     1    1955\n 2 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     2    2010\n 3 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     3    1955\n 4 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     4    2017\n 5 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     5    1959\n 6 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     6    1959\n 7 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     7    2002\n 8 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     8    1957\n 9 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     9    1957\n10 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10    10    2011\n# … with 336,766 more rows, 14 more variables: sched_dep_time <int>,\n#   dep_delay <dbl>, arr_time <int>, sched_arr_time <int>, arr_delay <dbl>,\n#   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>, air_time <dbl>,\n#   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>, and abbreviated\n#   variable name ¹​dep_time\n\n\nDifferences\n\nIn a join where keys have different column names the name of the first data frame survives (unless you use keep = TRUE). Here, faa instead of dest\nThe columns from the first data frame come first\nThe order of rows is taken from the first data frame, while duplication and dropping of variables is determined by the second data frame (because it is a right_join)\n\nUsing the fact that flights seem to be ordered by year, month, day, dep_time we can re-arrange:\n\nairports_right_flights |> \n  rename(dest = faa) |> \n  select(names(flights)) |> # Use order of flights\n  arrange(year, month, day, dep_time)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      517        515       2     830     819      11 UA     \n 2  2013     1     1      533        529       4     850     830      20 UA     \n 3  2013     1     1      542        540       2     923     850      33 AA     \n 4  2013     1     1      544        545      -1    1004    1022     -18 B6     \n 5  2013     1     1      554        600      -6     812     837     -25 DL     \n 6  2013     1     1      554        558      -4     740     728      12 UA     \n 7  2013     1     1      555        600      -5     913     854      19 B6     \n 8  2013     1     1      557        600      -3     709     723     -14 EV     \n 9  2013     1     1      557        600      -3     838     846      -8 B6     \n10  2013     1     1      558        600      -2     924     917       7 UA     \n# … with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\nNote of caution: A deeper analysis shows that the order is still not exactly the same."
  },
  {
    "objectID": "W5.html#left_join-with-reversed-data-frames",
    "href": "W5.html#left_join-with-reversed-data-frames",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "left_join with reversed data frames",
    "text": "left_join with reversed data frames\n\ndim(airports)\n\n[1] 1458    8\n\ndim(flights)\n\n[1] 336776     19\n\nairports |> \n  left_join(flights, by = c(\"faa\" = \"dest\"))\n\n# A tibble: 330,531 × 26\n   faa   name       lat    lon   alt    tz dst   tzone  year month   day dep_t…¹\n   <chr> <chr>    <dbl>  <dbl> <dbl> <dbl> <chr> <chr> <int> <int> <int>   <int>\n 1 04G   Lansdow…  41.1  -80.6  1044    -5 A     Amer…    NA    NA    NA      NA\n 2 06A   Moton F…  32.5  -85.7   264    -6 A     Amer…    NA    NA    NA      NA\n 3 06C   Schaumb…  42.0  -88.1   801    -6 A     Amer…    NA    NA    NA      NA\n 4 06N   Randall…  41.4  -74.4   523    -5 A     Amer…    NA    NA    NA      NA\n 5 09J   Jekyll …  31.1  -81.4    11    -5 A     Amer…    NA    NA    NA      NA\n 6 0A9   Elizabe…  36.4  -82.2  1593    -5 A     Amer…    NA    NA    NA      NA\n 7 0G6   William…  41.5  -84.5   730    -5 A     Amer…    NA    NA    NA      NA\n 8 0G7   Finger …  42.9  -76.8   492    -5 A     Amer…    NA    NA    NA      NA\n 9 0P2   Shoestr…  39.8  -76.6  1000    -5 U     Amer…    NA    NA    NA      NA\n10 0S9   Jeffers…  48.1 -123.    108    -8 A     Amer…    NA    NA    NA      NA\n# … with 330,521 more rows, 14 more variables: sched_dep_time <int>,\n#   dep_delay <dbl>, arr_time <int>, sched_arr_time <int>, arr_delay <dbl>,\n#   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>, air_time <dbl>,\n#   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>, and abbreviated\n#   variable name ¹​dep_time\n\n\nWhy does the number of rows changes after joining?\ndest is not a primary key in flights. There are more flights with the same destination so rows of airports get duplicated.\nWhy is the number of rows then less than the number of rows in flights?\nLet us do some checks:\n\nlength(unique(airports$faa)) # Unique turns out to be redundant because faa is a primary key\n\n[1] 1458\n\nlength(unique(flights$dest))\n\n[1] 105\n\n# There are much more airports then destinations in flights!\n# ... but the rows of airports prevail when it is the first in a left_join.\n# So, the data frame should even increase because \n# we get several rows of airports without flights\n# Let us dig deeper.\n\nsetdiff( unique(airports$faa), unique(flights$dest)) |> length()\n\n[1] 1357\n\n# 1,357 airports have no flights. But also:\nsetdiff( unique(flights$dest), unique(airports$faa)) |> length()\n\n[1] 4\n\n# There are four destinations in flights, which are not in the airports list!\n\n# How many flights are to these?\nflights |> \n  filter(dest %in% setdiff( unique(flights$dest), unique(airports$faa))) |> \n  nrow()\n\n[1] 7602\n\n# 7,602 flights go to destinations not listed as airport\n\n# Check\nnrow(airports |> left_join(flights, by = c(\"faa\" = \"dest\"))) == nrow(flights) - 7602 + 1357\n\n[1] TRUE\n\n# OK, now we have a clear picture\n# airport with left_joined flights duplicates the rows an airports for each flight flying to it\n# So the total number of rows is the number of flights plus the number of airport which do not \n# appear as a destination minus the flights which go to destinations which are not listed in airports\n\nThe new number of observation after a join can be a complex combination of duplication and dropping."
  },
  {
    "objectID": "W5.html#math-sets-and-vectors-backgroundlight-yellow",
    "href": "W5.html#math-sets-and-vectors-backgroundlight-yellow",
    "title": "W#5 Relational Data, Exploratory Data Analysis, …",
    "section": "Math: Sets and vectors {background:light-yellow}",
    "text": "Math: Sets and vectors {background:light-yellow}"
  },
  {
    "objectID": "W5.html#math-sets-and-vectors-background-colorlight-yellow",
    "href": "W5.html#math-sets-and-vectors-background-colorlight-yellow",
    "title": "W#5 Relational Data, Exploratory Data Analysis, …",
    "section": "Math: Sets and vectors {background-color:light-yellow}",
    "text": "Math: Sets and vectors {background-color:light-yellow}"
  },
  {
    "objectID": "W5.html#math-sets-and-vectors-background-colorecff33",
    "href": "W5.html#math-sets-and-vectors-background-colorecff33",
    "title": "W#5 Relational Data, Exploratory Data Analysis, …",
    "section": "Math: Sets and vectors {background-color:“ecff33”}",
    "text": "Math: Sets and vectors {background-color:“ecff33”}"
  },
  {
    "objectID": "W5.html#math-sets-and-vectors-background-colorred",
    "href": "W5.html#math-sets-and-vectors-background-colorred",
    "title": "W#5 Relational Data, Exploratory Data Analysis, …",
    "section": "Math: Sets and vectors {background-color:“red”}",
    "text": "Math: Sets and vectors {background-color:“red”}\nHallo"
  },
  {
    "objectID": "W5.html#math-sets-and-vectors-.background-colorred",
    "href": "W5.html#math-sets-and-vectors-.background-colorred",
    "title": "W#5 Relational Data, Exploratory Data Analysis, …",
    "section": "Math: Sets and vectors {.background-color:“red”}",
    "text": "Math: Sets and vectors {.background-color:“red”}"
  },
  {
    "objectID": "W5.html#math-sets-and-vectors-backgroundcolorred",
    "href": "W5.html#math-sets-and-vectors-backgroundcolorred",
    "title": "W#5 Relational Data, Exploratory Data Analysis, …",
    "section": "Math: Sets and vectors {backgroundcolor:“red”}",
    "text": "Math: Sets and vectors {backgroundcolor:“red”}\nHallo"
  },
  {
    "objectID": "W5.html#math-sets-and-vectors",
    "href": "W5.html#math-sets-and-vectors",
    "title": "W#5 Relational Data, Exploratory Data Analysis, …",
    "section": "Math: Sets and vectors",
    "text": "Math: Sets and vectors\nA set is mathematical model for the collection of different things.\nExamples:\n\n\\(\\{3, \\text{Hi}, 😀, 🖖 \\}\\)\n\\(\\{1,3,5\\}\\)\nThe natural numbers \\(\\mathbb{N} = \\{1, 2, 3, \\dots\\}\\) (infinite!)\n\\(\\{\\mathtt{\"EWR\"} \\mathtt{\"LGA\"} \\mathtt{\"JFK\"}\\}\\)\nthese are origin airports in flights"
  },
  {
    "objectID": "W5.html#slide-title",
    "href": "W5.html#slide-title",
    "title": "W#5 Relational Data, Exploratory Data Analysis, …",
    "section": "Slide Title",
    "text": "Slide Title"
  },
  {
    "objectID": "W5.html#math-sets-and-vectors-1",
    "href": "W5.html#math-sets-and-vectors-1",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Math: Sets and vectors",
    "text": "Math: Sets and vectors\nA vector is an ordered collection of things (elements) of the same type.\nIn a set each thing can only be once and the order does not matter!\n\\(\\{1,3,5\\} = \\{3,5,1\\} = \\{1,1,1,3,5,5\\}\\)\nFor vectors:\n\\([1\\ 3\\ 5] \\neq [3\\ 5\\ 1]\\) because we compare component-wise, so we cannot even compare with = \\([1\\ 1\\ 1\\ 3\\ 5\\ 5]\\)"
  },
  {
    "objectID": "W5.html#math-set-operations",
    "href": "W5.html#math-set-operations",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Math: Set operations",
    "text": "Math: Set operations\nFor sets \\(A = \\{🐺, 🦊, 🐶\\}\\) and \\(B = \\{🐶, 🐷, 🐹\\}\\):\n\nSet union \\(A \\cup B\\) = {🐺, 🦊, 🐶, 🐷, 🐹}\nSet intersection \\(A \\cap B\\) = {🐶}\nSet different \\(A \\setminus B\\) = {🐺, 🦊}$, \\(B \\setminus A\\) = {🐷, 🐹}"
  },
  {
    "objectID": "W5.html#set-operations-in-r",
    "href": "W5.html#set-operations-in-r",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Set operations in R",
    "text": "Set operations in R\nunique shows the set of elements in a vector\n\nunique(flights$origin)\n\n[1] \"EWR\" \"LGA\" \"JFK\"\n\n\nsetequal tests for set equality\n\nsetequal(c(\"EWR\",\"LGA\",\"JFK\"), c(\"EWR\",\"EWR\",\"LGA\",\"JFK\"))\n\n[1] TRUE\n\n\nunion, intersect, setdiff treat vectors as sets and operate as expected\n\nunion(1:5,3:7)\n\n[1] 1 2 3 4 5 6 7\n\nintersect(1:5,3:7)\n\n[1] 3 4 5\n\nsetdiff(1:5,3:7)\n\n[1] 1 2"
  },
  {
    "objectID": "W5.html#exploratory-data-analysis-1",
    "href": "W5.html#exploratory-data-analysis-1",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\n\nEDA is the systematic exploration of data using\n\nvisualization\ntransformation\ncomputation of characteristic values\nmodeling\n\n\n\nWe haven’t talked much about the latter two, but will do soon.\nComputation of characteristic values: Functions like mean, median, mode, standard deviation, or interquartile range\nModeling: Operations like linear regression or dimensionality reduction"
  },
  {
    "objectID": "W5.html#systematic-but-no-standard-routine",
    "href": "W5.html#systematic-but-no-standard-routine",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Systematic but no standard routine",
    "text": "Systematic but no standard routine\n\n“There are no routine statistical questions, only questionable statistical routines.” — Sir David Cox\n\n\n“Far better an approximate answer to the right question, which is often vague, than an exact answer to the wrong question, which can always be made precise.” — John Tukey"
  },
  {
    "objectID": "W5.html#definition-sets-and-vectors",
    "href": "W5.html#definition-sets-and-vectors",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Definition: Sets and vectors",
    "text": "Definition: Sets and vectors\nA set is mathematical model for the collection of different things.\nExamples:\n\n\\(\\{3, \\text{Hi}, 😀, 🖖 \\}\\)\n\\(\\{1,3,5\\}\\)\nThe natural numbers \\(\\mathbb{N} = \\{1, 2, 3, \\dots\\}\\) (infinite!)\n\\(\\{\\mathtt{\"EWR\"} \\mathtt{\"LGA\"} \\mathtt{\"JFK\"}\\}\\)\nthese are origin airports in flights"
  },
  {
    "objectID": "W5.html#systematic-but-no-standard-routine-1",
    "href": "W5.html#systematic-but-no-standard-routine-1",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Systematic but no standard routine",
    "text": "Systematic but no standard routine\n\nGoal of EDA: Develop understanding of your data.\nEDA’s iterative cycle\n\nGenerate questions about your data.\nSearch for answers by visualizing, transforming, and modelling your data.\nUse what you learn to refine your questions and/or generate new questions.\n\nEDA is fundamentally a creative process."
  },
  {
    "objectID": "W5.html#questions",
    "href": "W5.html#questions",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Questions",
    "text": "Questions\n\nThe way to ask quality questions:\n\nGenerate many questions!\nYou cannot come up with most interesting questions when you start.\n\nThere is no rule which questions to ask. These are useful\n\nWhat type of variation occurs within my variables?\n(Barplots, Histograms,…)\nWhat type of covariation occurs between my variables?\n(Scatterplots, Timelines,…)"
  },
  {
    "objectID": "W5.html#data-analysis-flowchart",
    "href": "W5.html#data-analysis-flowchart",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Data Analysis Flowchart",
    "text": "Data Analysis Flowchart"
  },
  {
    "objectID": "W5.html#six-types-of-questions",
    "href": "W5.html#six-types-of-questions",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Six types of questions",
    "text": "Six types of questions\n\nDescriptive: summarize a characteristic of a set of data\nExploratory: analyze to see if there are patterns, trends, or relationships between variables (hypothesis generating)\nInferential: analyze patterns, trends, or relationships in representative data from a population\nPredictive: make predictions for individuals or groups of individuals\nCausal: whether changing one factor will change another factor, on average, in a population\nMechanistic: explore “how” as opposed to whether\n\n\n\nLeek, Jeffery T., and Roger D. Peng. 2015. “What Is the Question?” Science 347 (6228): 1314–15. https://doi.org/10.1126/science.aaa6146."
  },
  {
    "objectID": "W5.html#example",
    "href": "W5.html#example",
    "title": "W#5 Relational Data, Exploratory Data Analysis, …",
    "section": "Example",
    "text": "Example\n\n\n\nJU-F22-MDSSB-DSCO-02: Data Science Concepts\n\n\n\nLeek, Jeffery T., and Roger D. Peng. 2015. “What Is the Question?” Science 347 (6228): 1314–15. https://doi.org/10.1126/science.aaa6146."
  },
  {
    "objectID": "W5.html#example-covid-19-and-vitamin-d",
    "href": "W5.html#example-covid-19-and-vitamin-d",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Example: COVID-19 and Vitamin D",
    "text": "Example: COVID-19 and Vitamin D\n\nDescriptive: frequency of hospitalisations due to COVID-19 in a set of data collected from a group of individuals\nExploratory: examine relationships between a range of dietary factors and COVID-19 hospitalisations\nInferential: examine whether any relationship between taking Vitamin D supplements and COVID-19 hospitalisations found in the sample hold for the population at large\nPredictive: what types of people will take Vitamin D supplements during the next year\nCausal: whether people with COVID-19 who were randomly assigned to take Vitamin D supplements or those who were not are hospitalised\nMechanistic: how increased vitamin D intake leads to a reduction in the number of viral illnesses"
  },
  {
    "objectID": "W5.html#questions-to-data-science-problems",
    "href": "W5.html#questions-to-data-science-problems",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Questions to data science problems",
    "text": "Questions to data science problems\n\nDo you have appropriate data to answer your question?\nDo you have information on confounding variables?\nWas the data you’re working with collected in a way that introduces bias?\n\n\n\nExample\nI want to estimate the average number of children in households in Bremen. I conduct a survey at an elementary school and ask pupils how many children, including themselves, live in their house. Then, I take the average of the responses.\n\nIs this a biased or an unbiased estimate of the number of children in households in Bremen?\nIf biased, will the value be an overestimate or underestimate?"
  },
  {
    "objectID": "W5.html#context-information-and-codebooks",
    "href": "W5.html#context-information-and-codebooks",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Context Information and Codebooks",
    "text": "Context Information and Codebooks\n\nNot all information is in the data!\nPotential confounding variables you infer from general knowledge\nInformation about data collection you may receive from an accompanying report\nInformation about computed variables you may need to look up in accompanying documentation\nInformation about certain variables you may find in an accompanying codebook. For example the exact wording of questions in survey data."
  },
  {
    "objectID": "W5.html#next",
    "href": "W5.html#next",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Next",
    "text": "Next\nNext Week\n\nSummarizing functions for data\nSome more math background (linked to programming)\n\nHomework 03\n\nshall come over the weekend, due in two week\nwill move towards\n\nexploratory data analysis\nanswering questions (You have some technical tools now at hand.)\nasking question\n\n\n\n\n\n\nJU-F22-MDSSB-DSCO-02: Data Science Concepts\n\n\nHint: Everyone has read access to the project repositories https://github.com/JU-F22-MDSSB-MET-01/ess-ind-janlorenz and https://github.com/JU-F22-MDSSB-MET-01/corona-ind-janlorenz as an example for data access. This should help to unify the data for work on Homework 03."
  },
  {
    "objectID": "W5.html#eda-embedded-in-a-data-science-project",
    "href": "W5.html#eda-embedded-in-a-data-science-project",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "EDA embedded in a data science project",
    "text": "EDA embedded in a data science project\n\nStating and refining the question\nExploring the data\nBuilding formal statistical models\nInterpreting the results\nCommunicating the results\n\n\n\nRoger D. Peng and Elizabeth Matsui. “The Art of Data Science.” A Guide for Anyone Who Works with Data. Skybrude Consulting, LLC (2015)."
  },
  {
    "objectID": "index.html#week-5-sep-29-more-under-the-hood-relational-data-exploratory-data-analysis",
    "href": "index.html#week-5-sep-29-more-under-the-hood-relational-data-exploratory-data-analysis",
    "title": "Data Science Concepts / Tools",
    "section": "Week 5, Sep 29: More under the hood, Relational Data, Exploratory Data Analysis",
    "text": "Week 5, Sep 29: More under the hood, Relational Data, Exploratory Data Analysis\nSlides Week 5\nTopics:\n\nMore under the hood\nAugmented vectors: Factors and Dates\nStrings\nRelational Data: Joins, joins, joins …\nMath: Sets and vectors\nExploratory Data Analysis\nData Science Projects\n\nHomework 02 due next Sunday.\nHomework 03 comes over the weekend."
  },
  {
    "objectID": "hw-instructions/hw-03-instr.html#corona",
    "href": "hw-instructions/hw-03-instr.html#corona",
    "title": "Homework 03",
    "section": "1 Corona",
    "text": "1 Corona\nContinue to work on your repository corona-ind-USERNAME and make the analysis in R-chunks.\nCreate a new Quarto-document and save it as “Corona_Analysis.qmd”.\n\nCustomize the YAML with the title “Corona Analysis”, your name, and output format being a standalone html-file with embedded resources. Enable code-folding in the output html file.\nWrite a chunk labeled data where you load the tidyverse library and import the data from Our World in Data (OWiD) into a tibble owid and the data from the World Health Organization (WHO) into a tibble called who (use read_csv for both).\nDocument what you did: Write a headline ## Data before the chunk data and briefly describe the two data sources and link the data files.\n\n\n\n\n\n\n\nTip\n\n\n\n\nIn https://github.com/JU-F22-MDSSB-MET-01/corona-ind-janlorenz/blob/main/Download_corona_data.R you find a script which downloads the corona datasets from OWiD and WHO. You can copy this.\nIn https://github.com/JU-F22-MDSSB-MET-01/corona-ind-janlorenz/blob/main/Corona.qmd you find an example for the YAML and the data import chunk.\n\n\n\n\n1.1 Question 1: Is the data of OWiD and WHO the same?\nWrite a new headline ## Differences between OWiD and WHO data, make the following analysis in a chunk, and write an answer to the question. Guide for the analysis:\n\nCreate a joined tibble. This can be done with a chain of pipes |>.\n\nMake a new tibble who_owid where you left join owid to who. Use the combination of the data and the country as the key. To that end you have to identify the corresponding columns in who and owid with the named vector c(\"Date_reported\" = \"date\", \"Country\" = \"location\").\nUse select to select and rename columns in who_owid such that you have columns for Date, Country, New_cases_who, New_cases_owid, Total_cases_who, and Total_cases_owid.\n\nMake a visualization where the new cases in WHO and OWiD appear as two lines. Filter for the time before 2020-07-01 and four countries: Germany, France, India, and a country of your choice (Hint: use %in%). Then facet your visualization by country.\nRepeat the visualization for the comparison of WHO and OWiD data for the total cases.\nBelow the visualizations, explain what is visualizaed and then answer the question based on the visualizations. (Some guiding questions: What are the differences? How severe are the differences on a daily basis and in the long run? What data shows more fluctuations?) Bonus: What is the reason for the difference?\n\n\nFor comparing New_cases_who and New_cases_owid you need a to make the tibble longer (pivot_longer) such that you have one column with a categroical variable specifying the data source and one column with the actual value of the new cases in each data set. Then you can make a ggplot with geom_line where you make two lines by assigning the data source to the color aesthetic.\nFor faceting, use facet_wrap. It is useful to specify that there should be only one column and that scales are specified such that each facet has its own y-axis scale (called free_y).\nThe same advice holds for the visualization of total cases.\n\n\n\n1.2 Question 2: Are there patterns in the timeline of new cases which seem unrelated to the potential spread of the virus in the population? How could we smooth them best?\nWrite a new headline ## Smoothing new cases, make a chunk where you compute three additional columns with smoothed case numbers (see below), make a visualization and explain which is most appropriate to use and why.\n\nComputed a new tibble who_smoothed from who for this question. (There would be no essential difference with owid.) For each day compute the average of the actual day and some days directly before such that each new value is an average of 3, 7, or 10 days. Call the three new columns New_cases_smooth3, New_cases_smooth7, and New_cases_smooth10. The average is the sum of all values divided by the total number of days. Use mutate. For each column use lag several times for each previous day (see ?lag). Don’t forget to group by countries!\nVisualize the timeline for Germany using a time span between 6 and 12 month. Make one panel for New_cases_smooth3, New_cases_smooth7, and New_cases_smooth10 respectively. (Hint: Either use pivot_longer and faceting, or three ggplot objects combined using the package patchwork.)\nAnswer the question. What is the pattern which seems unrelated to the spread of the virus? Which is the most appropriate smoothing, 3, 7, or 10 days and why?\n\n\n\n1.3 Question 3: How do deaths follow cases?\nMake a new headline about this question in your report.\nIn owid, there are variables new_cases_smoothed and new_deaths_smoothed which you can use for convenience to explore this question.\nTo explore the connection between COVID-19 cases and deaths focus on the first wave in Germany. In owid, filter the data for Germany and dates before 2020-07-01. Plot new_cases_smoothed and new_deaths_smoothed in one line plot using color to distinguish both. (Hint: Use pivot_longer.) Now, produce a new variable scaled_lagged_cases where you do a shift-and-scale transformation of new_cases_smoothed: That means you scale down the number of cases by multiplying a factor \\(y\\)(< 1) and you lag the number of cases along the time axis by \\(x\\) days using y * lag(new_cases_smoothed, x).\n\nPlay with numerical values of \\(x\\) and \\(y\\) by plotting scaled_lagged_cases together with new_death_smoothed. Find values for such that both lines overlap as good as possible. Put this visualization into the report.\nDescribe what these “visually calibrated” values of \\(x\\) and \\(y\\) tell us about the relation of cases and deaths of COVID-19?\nRedo the line plot with your calibrated values for all dates in Germany. Describe how the connection between new cases and deaths changes in the course of the pandemic. List potential reasons.\nRepeat this analysis for another country of your choice. To that end find out the time range of the first wave in the country before. Do you get the same \\(x\\) and \\(y\\) by visually calibrating for this country?\n\n\n\n1.4 Question 4: How is the severity of the corona pandemic in countries related to human development?\nMake a new headline about this question in your report.\nHuman development is meant to be measured by the human development index of the United Nations Development Programme. Briefly, describe in the report how the Human Development Index (HDI) is composed.\nUse owid. Make a figure which visualizes each country as a point with human_development_index on the horizontal and total_deaths_per_million on the vertical axis. Filter the values for the date 2022-08-31. Filter out all rows which do not represent countries. (Hint: You can take all rows which have a valid value for continent.) Make the size of dots such that the area is proportional to the population. (Hint: Use the scale_size_area() as an additional layer.) Color the dots by continent.\nDescribe the visible relation of HDI and total corona related deaths per million. Emphasize what you find interesting, and hypothesize about potential reasons for the finding.\n\n\n1.5 Submit your report\nMake sure that your rendered html file reads nicely as a report. Polish the formatting if necessary. Commit your qmd-file and the rendered html-file and push it to GitHub."
  },
  {
    "objectID": "W5.html#how-many-days-are-you-old",
    "href": "W5.html#how-many-days-are-you-old",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "How many days are you old?",
    "text": "How many days are you old?\n\n\nSys.Date() - as.Date(\"1976-01-16\")  # Sys.Date() gives as the current day your computer is set to\n\nTime difference of 17060 days"
  },
  {
    "objectID": "W5.html#how-many-seconds-are-you-old",
    "href": "W5.html#how-many-seconds-are-you-old",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "How many seconds are you old?",
    "text": "How many seconds are you old?\n\nas.double(lubridate::now()) - as.double(lubridate::ymd_hm(\"1976-01-16_12:04\"))\n\n[1] 1.474e+09"
  },
  {
    "objectID": "W5.html#joining-when-key-names-differ",
    "href": "W5.html#joining-when-key-names-differ",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Joining when key names differ?",
    "text": "Joining when key names differ?\nWe have to specify the key relation with a named vector in the by argument.\n\ndim(flights)\n\n[1] 336776     19\n\nflights |> left_join(airports, by = c(\"dest\" = \"faa\"))\n\n# A tibble: 336,776 × 26\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      517        515       2     830     819      11 UA     \n 2  2013     1     1      533        529       4     850     830      20 UA     \n 3  2013     1     1      542        540       2     923     850      33 AA     \n 4  2013     1     1      544        545      -1    1004    1022     -18 B6     \n 5  2013     1     1      554        600      -6     812     837     -25 DL     \n 6  2013     1     1      554        558      -4     740     728      12 UA     \n 7  2013     1     1      555        600      -5     913     854      19 B6     \n 8  2013     1     1      557        600      -3     709     723     -14 EV     \n 9  2013     1     1      557        600      -3     838     846      -8 B6     \n10  2013     1     1      558        600      -2     753     745       8 AA     \n# … with 336,766 more rows, 16 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, name <chr>, lat <dbl>, lon <dbl>,\n#   alt <dbl>, tz <dbl>, dst <chr>, tzone <chr>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\nWhy does the number of rows stays the same after joining?\n\nfaa is a primary key in airports."
  },
  {
    "objectID": "W5_2.html#named-vectors",
    "href": "W5_2.html#named-vectors",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Named vectors",
    "text": "Named vectors\nAll types of vectors can be named upon creation\n\nc(Num1 = 4, Second = 7, Last = 8)\n\n\n\n  Num1 Second   Last \n     4      7      8 \n\n\n\nor names can be set afterward.\n\nx <- 1:4\ny <- set_names(x, c(\"a\",\"b\",\"c\",\"d\"))\ny\n\n\n\na b c d \n1 2 3 4 \n\n\n\n\nNamed vectors can be used for subsetting.\n\ny[c(\"b\",\"d\")]\n\n\n\nb d \n2 4"
  },
  {
    "objectID": "W5_2.html#reminder-indexing-and-vectorized-thinking",
    "href": "W5_2.html#reminder-indexing-and-vectorized-thinking",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Reminder: Indexing and vectorized thinking",
    "text": "Reminder: Indexing and vectorized thinking\n\nx <- set_names(1:10,LETTERS[1:10])\nx\n\n\n\n A  B  C  D  E  F  G  H  I  J \n 1  2  3  4  5  6  7  8  9 10 \n\n\n\n\nx[c(4,2,1,1,1,1,4,1,5)]\n\n\n\nD B A A A A D A E \n4 2 1 1 1 1 4 1 5 \n\n\n\n\nRemoving with negative index numbers.\n\nx[c(-3,-5,-2)]\n\n\n\n A  D  F  G  H  I  J \n 1  4  6  7  8  9 10 \n\n\n\n\nMixing does not work.\nx[c(-3,1)]  # Will throw an error"
  },
  {
    "objectID": "W5_2.html#r-objects-can-have-attributes",
    "href": "W5_2.html#r-objects-can-have-attributes",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "R objects can have attributes",
    "text": "R objects can have attributes\nIn a named vector, the names are an attribute.\n\nx\n\n A  B  C  D  E  F  G  H  I  J \n 1  2  3  4  5  6  7  8  9 10 \n\nattributes(x)\n\n$names\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\n\n\nAttributes can be assigned freely.\n\nattr(x, \"SayHi\") <- \"Hi\"\nattr(x, \"SayBye\") <- \"Bye\"\nattributes(x)\n\n\n\n$names\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\n$SayHi\n[1] \"Hi\"\n\n$SayBye\n[1] \"Bye\""
  },
  {
    "objectID": "W5_2.html#attributes-in-data-structures",
    "href": "W5_2.html#attributes-in-data-structures",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Attributes in data structures",
    "text": "Attributes in data structures\n\nlibrary(nycflights13)\nattributes(airports)\n\n\n\n$class\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n$row.names\n   [1]    1    2    3    4    5    6    7    8    9   10   11   12   13   14\n  [15]   15   16   17   18   19   20   21   22   23   24   25   26   27   28\n  [29]   29   30   31   32   33   34   35   36   37   38   39   40   41   42\n  [43]   43   44   45   46   47   48   49   50   51   52   53   54   55   56\n  [57]   57   58   59   60   61   62   63   64   65   66   67   68   69   70\n  [71]   71   72   73   74   75   76   77   78   79   80   81   82   83   84\n  [85]   85   86   87   88   89   90   91   92   93   94   95   96   97   98\n  [99]   99  100  101  102  103  104  105  106  107  108  109  110  111  112\n [113]  113  114  115  116  117  118  119  120  121  122  123  124  125  126\n [127]  127  128  129  130  131  132  133  134  135  136  137  138  139  140\n [141]  141  142  143  144  145  146  147  148  149  150  151  152  153  154\n [155]  155  156  157  158  159  160  161  162  163  164  165  166  167  168\n [169]  169  170  171  172  173  174  175  176  177  178  179  180  181  182\n [183]  183  184  185  186  187  188  189  190  191  192  193  194  195  196\n [197]  197  198  199  200  201  202  203  204  205  206  207  208  209  210\n [211]  211  212  213  214  215  216  217  218  219  220  221  222  223  224\n [225]  225  226  227  228  229  230  231  232  233  234  235  236  237  238\n [239]  239  240  241  242  243  244  245  246  247  248  249  250  251  252\n [253]  253  254  255  256  257  258  259  260  261  262  263  264  265  266\n [267]  267  268  269  270  271  272  273  274  275  276  277  278  279  280\n [281]  281  282  283  284  285  286  287  288  289  290  291  292  293  294\n [295]  295  296  297  298  299  300  301  302  303  304  305  306  307  308\n [309]  309  310  311  312  313  314  315  316  317  318  319  320  321  322\n [323]  323  324  325  326  327  328  329  330  331  332  333  334  335  336\n [337]  337  338  339  340  341  342  343  344  345  346  347  348  349  350\n [351]  351  352  353  354  355  356  357  358  359  360  361  362  363  364\n [365]  365  366  367  368  369  370  371  372  373  374  375  376  377  378\n [379]  379  380  381  382  383  384  385  386  387  388  389  390  391  392\n [393]  393  394  395  396  397  398  399  400  401  402  403  404  405  406\n [407]  407  408  409  410  411  412  413  414  415  416  417  418  419  420\n [421]  421  422  423  424  425  426  427  428  429  430  431  432  433  434\n [435]  435  436  437  438  439  440  441  442  443  444  445  446  447  448\n [449]  449  450  451  452  453  454  455  456  457  458  459  460  461  462\n [463]  463  464  465  466  467  468  469  470  471  472  473  474  475  476\n [477]  477  478  479  480  481  482  483  484  485  486  487  488  489  490\n [491]  491  492  493  494  495  496  497  498  499  500  501  502  503  504\n [505]  505  506  507  508  509  510  511  512  513  514  515  516  517  518\n [519]  519  520  521  522  523  524  525  526  527  528  529  530  531  532\n [533]  533  534  535  536  537  538  539  540  541  542  543  544  545  546\n [547]  547  548  549  550  551  552  553  554  555  556  557  558  559  560\n [561]  561  562  563  564  565  566  567  568  569  570  571  572  573  574\n [575]  575  576  577  578  579  580  581  582  583  584  585  586  587  588\n [589]  589  590  591  592  593  594  595  596  597  598  599  600  601  602\n [603]  603  604  605  606  607  608  609  610  611  612  613  614  615  616\n [617]  617  618  619  620  621  622  623  624  625  626  627  628  629  630\n [631]  631  632  633  634  635  636  637  638  639  640  641  642  643  644\n [645]  645  646  647  648  649  650  651  652  653  654  655  656  657  658\n [659]  659  660  661  662  663  664  665  666  667  668  669  670  671  672\n [673]  673  674  675  676  677  678  679  680  681  682  683  684  685  686\n [687]  687  688  689  690  691  692  693  694  695  696  697  698  699  700\n [701]  701  702  703  704  705  706  707  708  709  710  711  712  713  714\n [715]  715  716  717  718  719  720  721  722  723  724  725  726  727  728\n [729]  729  730  731  732  733  734  735  736  737  738  739  740  741  742\n [743]  743  744  745  746  747  748  749  750  751  752  753  754  755  756\n [757]  757  758  759  760  761  762  763  764  765  766  767  768  769  770\n [771]  771  772  773  774  775  776  777  778  779  780  781  782  783  784\n [785]  785  786  787  788  789  790  791  792  793  794  795  796  797  798\n [799]  799  800  801  802  803  804  805  806  807  808  809  810  811  812\n [813]  813  814  815  816  817  818  819  820  821  822  823  824  825  826\n [827]  827  828  829  830  831  832  833  834  835  836  837  838  839  840\n [841]  841  842  843  844  845  846  847  848  849  850  851  852  853  854\n [855]  855  856  857  858  859  860  861  862  863  864  865  866  867  868\n [869]  869  870  871  872  873  874  875  876  877  878  879  880  881  882\n [883]  883  884  885  886  887  888  889  890  891  892  893  894  895  896\n [897]  897  898  899  900  901  902  903  904  905  906  907  908  909  910\n [911]  911  912  913  914  915  916  917  918  919  920  921  922  923  924\n [925]  925  926  927  928  929  930  931  932  933  934  935  936  937  938\n [939]  939  940  941  942  943  944  945  946  947  948  949  950  951  952\n [953]  953  954  955  956  957  958  959  960  961  962  963  964  965  966\n [967]  967  968  969  970  971  972  973  974  975  976  977  978  979  980\n [981]  981  982  983  984  985  986  987  988  989  990  991  992  993  994\n [995]  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008\n[1009] 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022\n[1023] 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036\n[1037] 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050\n[1051] 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064\n[1065] 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078\n[1079] 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092\n[1093] 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106\n[1107] 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120\n[1121] 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134\n[1135] 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148\n[1149] 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162\n[1163] 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176\n[1177] 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190\n[1191] 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204\n[1205] 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218\n[1219] 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232\n[1233] 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246\n[1247] 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260\n[1261] 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274\n[1275] 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288\n[1289] 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302\n[1303] 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316\n[1317] 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330\n[1331] 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344\n[1345] 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358\n[1359] 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372\n[1373] 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386\n[1387] 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400\n[1401] 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414\n[1415] 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428\n[1429] 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442\n[1443] 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456\n[1457] 1457 1458\n\n$spec\ncols(\n  id = col_double(),\n  name = col_character(),\n  city = col_character(),\n  country = col_character(),\n  faa = col_character(),\n  icao = col_character(),\n  lat = col_double(),\n  lon = col_double(),\n  alt = col_double(),\n  tz = col_double(),\n  dst = col_character(),\n  tzone = col_character()\n)\n\n$names\n[1] \"faa\"   \"name\"  \"lat\"   \"lon\"   \"alt\"   \"tz\"    \"dst\"   \"tzone\""
  },
  {
    "objectID": "W5_2.html#three-important-attributes",
    "href": "W5_2.html#three-important-attributes",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Three important attributes",
    "text": "Three important attributes\n\nNames are used to name element of a vector (counting also lists as vectors and therefore also data frames as lists of atomic vectors of the same length)\nDimensions (dim()) is a short numeric vector making a vector behave as a matrix or a higher dimensional array. A vector 1:6 together with dim being c(2,3) is a matrix with 2 rows and 3 columns\n\\(\\begin{bmatrix} 1 & 3 & 5 \\\\ 2 & 4 & 6 \\end{bmatrix}\\)\nClass is used to implement the S3 object oriented system. We don’t need to know the details here. The class system makes it for example possible that the same function, e.g. print() behaves differently for objects of different a different class.\n\nClass plays a role in specifying augmented vectors like factors, dates, date-times, or tibbles."
  },
  {
    "objectID": "W5_2.html#factors",
    "href": "W5_2.html#factors",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Factors",
    "text": "Factors\nR uses factors to handle categorical variables, variables that have a fixed and known set of possible values\n\nx <- factor(c(\"BS\", \"MS\", \"PhD\", \"MS\", \"BS\", \"BS\"))\nx\n\n\n\n[1] BS  MS  PhD MS  BS  BS \nLevels: BS MS PhD\n\n\n\nTechnically, a factor is vector of integers with a levels attribute which specifies the categories for the integers.\n\ntypeof(x)\n\n[1] \"integer\"\n\nas.integer(x)\n\n[1] 1 2 3 2 1 1\n\nattributes(x)\n\n$levels\n[1] \"BS\"  \"MS\"  \"PhD\"\n\n$class\n[1] \"factor\"\n\n\n\n\nThe class factor makes R print the level of each element of the vector instead of the underlying integer."
  },
  {
    "objectID": "W5_2.html#factors-for-data-visualization",
    "href": "W5_2.html#factors-for-data-visualization",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Factors for data visualization",
    "text": "Factors for data visualization\nWe manipulate factors with functions from the forcats package of the tidyverse core.\n\nPlotReverseOrder by frequencyRegroup\n\n\n\nmpg |> ggplot(aes(y = manufacturer)) + geom_bar()\n\n\n\n\n\n\n\nmpg |> ggplot(aes(y = fct_rev(manufacturer))) + geom_bar()\n\n\n\n\n\n\n\nmpg |> ggplot(aes(y = fct_rev(fct_infreq(manufacturer)))) + geom_bar()\n\n\n\n\n\n\n\nmpg |> ggplot(aes(y = fct_other(manufacturer, keep = c(\"dodge\", \"toyota\", \"volkswagen\")))) + geom_bar()"
  },
  {
    "objectID": "W5_2.html#dates",
    "href": "W5_2.html#dates",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Dates",
    "text": "Dates\n\nISO 8601 standard for dates: YYYY-MM-DD. Today: 2022-09-29.\nDates in R are numeric vectors that represent the number of days since 1 January 1970.\n\n\ny <- as.Date(\"2020-01-01\"); y\n\n[1] \"2020-01-01\"\n\ntypeof(y)\n\n[1] \"double\"\n\nattributes(y)\n\n$class\n[1] \"Date\"\n\nas.double(y)\n\n[1] 18262\n\nas.double(as.Date(\"1970-01-01\"))\n\n[1] 0\n\nas.double(as.Date(\"1969-01-01\"))\n\n[1] -365"
  },
  {
    "objectID": "W5_2.html#how-many-days-are-you-old",
    "href": "W5_2.html#how-many-days-are-you-old",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "How many days are you old?",
    "text": "How many days are you old?\n\n\nSys.Date() - as.Date(\"1976-01-16\")  # Sys.Date() gives as the current day your computer is set to\n\nTime difference of 17058 days"
  },
  {
    "objectID": "W5_2.html#date-times",
    "href": "W5_2.html#date-times",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Date-times",
    "text": "Date-times\nFor date-time manipulation use lubridate form the tidyverse. Not in the core so it has to be loaded.1\n\nx <- lubridate::ymd_hm(\"1970-01-01 01:00\")\nx\n\n[1] \"1970-01-01 01:00:00 UTC\"\n\nattributes(x)\n\n$class\n[1] \"POSIXct\" \"POSIXt\" \n\n$tzone\n[1] \"UTC\"\n\nas.double(x)\n\n[1] 3600\n\n\nUTC: Coordinated Universal Time. We are in the UTC+1 timezone.\nPOSIXct: Portable Operating System Interface, calendar time. Stores date and time in seconds with the number of seconds beginning at 1 January 1970.\nInstead of loading package pack to use its function func you can also write pack::func all the time. This works when the package is installed even when not loaded."
  },
  {
    "objectID": "W5_2.html#how-many-seconds-are-you-old",
    "href": "W5_2.html#how-many-seconds-are-you-old",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "How many seconds are you old?",
    "text": "How many seconds are you old?\n\nas.double(lubridate::now()) - as.double(lubridate::ymd_hm(\"1976-01-16_12:04\"))\n\n[1] 1473810715"
  },
  {
    "objectID": "W5_2.html#more-about",
    "href": "W5_2.html#more-about",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "More about …",
    "text": "More about …\n\nFactors: R for Data Science Chapter 15\nDates and times: R for Data Science Chapter 16"
  },
  {
    "objectID": "W5_2.html#string-modification",
    "href": "W5_2.html#string-modification",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "String modification",
    "text": "String modification\nWe modify strings with the stringr package from the tidyverse core.\nAll functions from stringr start with str_.\nVery few examples:\n\nc(\"x\",\"y\")\n\n[1] \"x\" \"y\"\n\nstr_c(\"x\",\"y\")\n\n[1] \"xy\"\n\nstr_c(\"x\",\"y\",\"z\", sep=\",\")\n\n[1] \"x,y,z\"\n\nlength(c(\"x\",\"y\",\"z\"))\n\n[1] 3\n\nstr_length(c(\"x\",\"y\",\"z\"))\n\n[1] 1 1 1\n\nstr_length(c(\"This is a string.\",\"z\"))\n\n[1] 17  1"
  },
  {
    "objectID": "W5_2.html#string-wrangling-with-variable-names",
    "href": "W5_2.html#string-wrangling-with-variable-names",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "String wrangling with variable names",
    "text": "String wrangling with variable names\n\ndata <- tibble(Name = c(\"A\",\"B\",\"C\"), Age_2020 = c(20,30,40), Age_2021 = c(21,31,41), Age_2022 = c(22,32,42))\ndata\n\n# A tibble: 3 × 4\n  Name  Age_2020 Age_2021 Age_2022\n  <chr>    <dbl>    <dbl>    <dbl>\n1 A           20       21       22\n2 B           30       31       32\n3 C           40       41       42\n\n\nWe tidy that data set by creating a year variable.\n\n\ndata |> pivot_longer(c(\"Age_2020\", \"Age_2021\", \"Age_2022\"), names_to = \"Year\", values_to=\"Age\")\n\n\n\n# A tibble: 9 × 3\n  Name  Year       Age\n  <chr> <chr>    <dbl>\n1 A     Age_2020    20\n2 A     Age_2021    21\n3 A     Age_2022    22\n4 B     Age_2020    30\n5 B     Age_2021    31\n6 B     Age_2022    32\n7 C     Age_2020    40\n8 C     Age_2021    41\n9 C     Age_2022    42\n\n\n\n\nOK, but the year variable is a string but we want numbers."
  },
  {
    "objectID": "W5_2.html#use-word",
    "href": "W5_2.html#use-word",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Use word",
    "text": "Use word\nword extracts words from a sentence. However, the separator need not be \" \" but can be any character.\n\nword(\"This is a string.\", start=2, end=-2) \n\n[1] \"is a\"\n\n#Selects from the second to the second last word.\nword(\"Age_2022\", start=2, sep = \"_\")\n\n[1] \"2022\"\n\n\n\nIt also works vectorized.\n\ndata |> pivot_longer(c(\"Age_2020\", \"Age_2021\", \"Age_2022\"), names_to = \"Year\", values_to=\"Age\") |> \n  mutate(Year = word(Year, start = 2, sep = \"_\") |> as.numeric())\n\n\n\n# A tibble: 9 × 3\n  Name   Year   Age\n  <chr> <dbl> <dbl>\n1 A      2020    20\n2 A      2021    21\n3 A      2022    22\n4 B      2020    30\n5 B      2021    31\n6 B      2022    32\n7 C      2020    40\n8 C      2021    41\n9 C      2022    42\n\n\n… More on strings and regular expressions: R for Data Science Chapter 14"
  },
  {
    "objectID": "W5_2.html#working-with-more-data-frames",
    "href": "W5_2.html#working-with-more-data-frames",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Working with more data frames",
    "text": "Working with more data frames\n\nData can be distributed in several data frames which have relations which each other.\nFor example, they share variables as the five data frames in nycflights13.\n\n\n\n\nOften variables in different data frame have the same name, but that need not be the case! See the variable faa in airports matches origin and dest in flights."
  },
  {
    "objectID": "W5_2.html#data-women-in-science",
    "href": "W5_2.html#data-women-in-science",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Data: Women in science",
    "text": "Data: Women in science\n10 women in science who changed the world: Ada Lovelace, Marie Curie, Janaki Ammal, Chien-Shiung Wu, Katherine Johnson, Rosalind Franklin, Vera Rubin, Gladys West, Flossie Wong-Staal, Jennifer Doudna\n\n\n\n\nProfessionsDatesWorks\n\n\n\nprofessions <- read_csv(\"data/scientists/professions.csv\")\nprofessions\n\n# A tibble: 10 × 2\n   name               profession                        \n   <chr>              <chr>                             \n 1 Ada Lovelace       Mathematician                     \n 2 Marie Curie        Physicist and Chemist             \n 3 Janaki Ammal       Botanist                          \n 4 Chien-Shiung Wu    Physicist                         \n 5 Katherine Johnson  Mathematician                     \n 6 Rosalind Franklin  Chemist                           \n 7 Vera Rubin         Astronomer                        \n 8 Gladys West        Mathematician                     \n 9 Flossie Wong-Staal Virologist and Molecular Biologist\n10 Jennifer Doudna    Biochemist                        \n\n\n\n\n\ndates <- read_csv(\"data/scientists/dates.csv\")\ndates\n\n# A tibble: 8 × 3\n  name               birth_year death_year\n  <chr>                   <dbl>      <dbl>\n1 Janaki Ammal             1897       1984\n2 Chien-Shiung Wu          1912       1997\n3 Katherine Johnson        1918       2020\n4 Rosalind Franklin        1920       1958\n5 Vera Rubin               1928       2016\n6 Gladys West              1930         NA\n7 Flossie Wong-Staal       1947         NA\n8 Jennifer Doudna          1964         NA\n\n\n\n\n\nworks <- read_csv(\"data/scientists/works.csv\")\nworks\n\n# A tibble: 9 × 2\n  name               known_for                                                  \n  <chr>              <chr>                                                      \n1 Ada Lovelace       first computer algorithm                                   \n2 Marie Curie        theory of radioactivity,  discovery of elements polonium a…\n3 Janaki Ammal       hybrid species, biodiversity protection                    \n4 Chien-Shiung Wu    confim and refine theory of radioactive beta decy, Wu expe…\n5 Katherine Johnson  calculations of orbital mechanics critical to sending the …\n6 Vera Rubin         existence of dark matter                                   \n7 Gladys West        mathematical modeling of the shape of the Earth which serv…\n8 Flossie Wong-Staal first scientist to clone HIV and create a map of its genes…\n9 Jennifer Doudna    one of the primary developers of CRISPR, a ground-breaking…\n\n\n\n\n\n\n\nSource: Discover Magazine\nThe data can be downloaded: professions.csv, dates.csv, works.csv"
  },
  {
    "objectID": "W5_2.html#we-want-this-data-frame",
    "href": "W5_2.html#we-want-this-data-frame",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "We want this data frame",
    "text": "We want this data frame\n\n\n# A tibble: 10 × 5\n   name               profession                         birth…¹ death…² known…³\n   <chr>              <chr>                                <dbl>   <dbl> <chr>  \n 1 Ada Lovelace       Mathematician                           NA      NA first …\n 2 Marie Curie        Physicist and Chemist                   NA      NA theory…\n 3 Janaki Ammal       Botanist                              1897    1984 hybrid…\n 4 Chien-Shiung Wu    Physicist                             1912    1997 confim…\n 5 Katherine Johnson  Mathematician                         1918    2020 calcul…\n 6 Rosalind Franklin  Chemist                               1920    1958 <NA>   \n 7 Vera Rubin         Astronomer                            1928    2016 existe…\n 8 Gladys West        Mathematician                         1930      NA mathem…\n 9 Flossie Wong-Staal Virologist and Molecular Biologist    1947      NA first …\n10 Jennifer Doudna    Biochemist                            1964      NA one of…\n# … with abbreviated variable names ¹​birth_year, ²​death_year, ³​known_for"
  },
  {
    "objectID": "W5_2.html#joining-data-frames",
    "href": "W5_2.html#joining-data-frames",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Joining data frames",
    "text": "Joining data frames\nsomething_join(x, y)^{The notion join comes from SQL database. In other data manipulation frameworks joining is called merging.} for data frames x and y which have a relation\n\nleft_join(): all rows from x\nright_join(): all rows from y\nfull_join(): all rows from both x and y\ninner_join(): all rows from x where there are matching values in y, return all combination of multiple matches in the case of multiple matches\n…"
  },
  {
    "objectID": "W5_2.html#simple-setup-for-x-and-y",
    "href": "W5_2.html#simple-setup-for-x-and-y",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Simple setup for x and y",
    "text": "Simple setup for x and y\n\nx <- tibble(\n  id = c(1, 2, 3),\n  value_x = c(\"x1\", \"x2\", \"x3\")\n  )\ny <- tibble(\n  id = c(1, 2, 4),\n  value_y = c(\"y1\", \"y2\", \"y4\")\n  )\nx\n\n# A tibble: 3 × 2\n     id value_x\n  <dbl> <chr>  \n1     1 x1     \n2     2 x2     \n3     3 x3     \n\ny\n\n# A tibble: 3 × 2\n     id value_y\n  <dbl> <chr>  \n1     1 y1     \n2     2 y2     \n3     4 y4"
  },
  {
    "objectID": "W5_2.html#left_join",
    "href": "W5_2.html#left_join",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "left_join()",
    "text": "left_join()\n\n\n\n\n\nleft_join(x, y)\n\n# A tibble: 3 × 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2     \n3     3 x3      <NA>"
  },
  {
    "objectID": "W5_2.html#right_join",
    "href": "W5_2.html#right_join",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "right_join()",
    "text": "right_join()\n\n\n\n\n\nright_join(x, y)\n\n# A tibble: 3 × 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2     \n3     4 <NA>    y4"
  },
  {
    "objectID": "W5_2.html#full_join",
    "href": "W5_2.html#full_join",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "full_join()",
    "text": "full_join()\n\n\n\n\n\nfull_join(x, y)\n\n# A tibble: 4 × 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2     \n3     3 x3      <NA>   \n4     4 <NA>    y4"
  },
  {
    "objectID": "W5_2.html#inner_join",
    "href": "W5_2.html#inner_join",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "inner_join()",
    "text": "inner_join()\n\n\n\n\n\ninner_join(x, y)\n\n# A tibble: 2 × 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2"
  },
  {
    "objectID": "W5_2.html#women-in-science",
    "href": "W5_2.html#women-in-science",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Women in science",
    "text": "Women in science\n\nleft_joinright_joinfull_joininner_joinFinal\n\n\n\nprofessions |> left_join(works)\n\n# A tibble: 10 × 3\n   name               profession                         known_for              \n   <chr>              <chr>                              <chr>                  \n 1 Ada Lovelace       Mathematician                      first computer algorit…\n 2 Marie Curie        Physicist and Chemist              theory of radioactivit…\n 3 Janaki Ammal       Botanist                           hybrid species, biodiv…\n 4 Chien-Shiung Wu    Physicist                          confim and refine theo…\n 5 Katherine Johnson  Mathematician                      calculations of orbita…\n 6 Rosalind Franklin  Chemist                            <NA>                   \n 7 Vera Rubin         Astronomer                         existence of dark matt…\n 8 Gladys West        Mathematician                      mathematical modeling …\n 9 Flossie Wong-Staal Virologist and Molecular Biologist first scientist to clo…\n10 Jennifer Doudna    Biochemist                         one of the primary dev…\n\n\n\n\n\nprofessions |> right_join(works)\n\n# A tibble: 9 × 3\n  name               profession                         known_for               \n  <chr>              <chr>                              <chr>                   \n1 Ada Lovelace       Mathematician                      first computer algorithm\n2 Marie Curie        Physicist and Chemist              theory of radioactivity…\n3 Janaki Ammal       Botanist                           hybrid species, biodive…\n4 Chien-Shiung Wu    Physicist                          confim and refine theor…\n5 Katherine Johnson  Mathematician                      calculations of orbital…\n6 Vera Rubin         Astronomer                         existence of dark matter\n7 Gladys West        Mathematician                      mathematical modeling o…\n8 Flossie Wong-Staal Virologist and Molecular Biologist first scientist to clon…\n9 Jennifer Doudna    Biochemist                         one of the primary deve…\n\n\n\n\n\ndates |> full_join(works)\n\n# A tibble: 10 × 4\n   name               birth_year death_year known_for                           \n   <chr>                   <dbl>      <dbl> <chr>                               \n 1 Janaki Ammal             1897       1984 hybrid species, biodiversity protec…\n 2 Chien-Shiung Wu          1912       1997 confim and refine theory of radioac…\n 3 Katherine Johnson        1918       2020 calculations of orbital mechanics c…\n 4 Rosalind Franklin        1920       1958 <NA>                                \n 5 Vera Rubin               1928       2016 existence of dark matter            \n 6 Gladys West              1930         NA mathematical modeling of the shape …\n 7 Flossie Wong-Staal       1947         NA first scientist to clone HIV and cr…\n 8 Jennifer Doudna          1964         NA one of the primary developers of CR…\n 9 Ada Lovelace               NA         NA first computer algorithm            \n10 Marie Curie                NA         NA theory of radioactivity,  discovery…\n\n\n\n\n\ndates |> inner_join(works)\n\n# A tibble: 7 × 4\n  name               birth_year death_year known_for                            \n  <chr>                   <dbl>      <dbl> <chr>                                \n1 Janaki Ammal             1897       1984 hybrid species, biodiversity protect…\n2 Chien-Shiung Wu          1912       1997 confim and refine theory of radioact…\n3 Katherine Johnson        1918       2020 calculations of orbital mechanics cr…\n4 Vera Rubin               1928       2016 existence of dark matter             \n5 Gladys West              1930         NA mathematical modeling of the shape o…\n6 Flossie Wong-Staal       1947         NA first scientist to clone HIV and cre…\n7 Jennifer Doudna          1964         NA one of the primary developers of CRI…\n\n\n\n\n\nprofessions |> left_join(dates) |> inner_join(works)\n\n# A tibble: 9 × 5\n  name               profession                         birth_…¹ death…² known…³\n  <chr>              <chr>                                 <dbl>   <dbl> <chr>  \n1 Ada Lovelace       Mathematician                            NA      NA first …\n2 Marie Curie        Physicist and Chemist                    NA      NA theory…\n3 Janaki Ammal       Botanist                               1897    1984 hybrid…\n4 Chien-Shiung Wu    Physicist                              1912    1997 confim…\n5 Katherine Johnson  Mathematician                          1918    2020 calcul…\n6 Vera Rubin         Astronomer                             1928    2016 existe…\n7 Gladys West        Mathematician                          1930      NA mathem…\n8 Flossie Wong-Staal Virologist and Molecular Biologist     1947      NA first …\n9 Jennifer Doudna    Biochemist                             1964      NA one of…\n# … with abbreviated variable names ¹​birth_year, ²​death_year, ³​known_for"
  },
  {
    "objectID": "W5_2.html#keys",
    "href": "W5_2.html#keys",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Keys",
    "text": "Keys\n\nA key is a variable or a set of variables which uniquely identifies observations\nWhat was the key in the data frame of women in science?\n\n\n\nSwitching back to nycflights13 as example\nIn simple cases, a single variable is sufficient to identify an observation, e.g. each plane in planes is identified by tailnum.\nSometimes, multiple variables are needed; e.g. to identify an observation in weather you need five variables: year, month, day, hour, and origin"
  },
  {
    "objectID": "W5_2.html#how-can-we-check",
    "href": "W5_2.html#how-can-we-check",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "How can we check?",
    "text": "How can we check?\nCounting observation and filter those more than one\n\nlibrary(nycflights13)\nplanes |> count(tailnum) |> filter(n > 1)\n\n# A tibble: 0 × 2\n# … with 2 variables: tailnum <chr>, n <int>\n\nweather |> count(year, month, day, hour, origin) |> filter(n > 1) \n\n# A tibble: 3 × 6\n   year month   day  hour origin     n\n  <int> <int> <int> <int> <chr>  <int>\n1  2013    11     3     1 EWR        2\n2  2013    11     3     1 JFK        2\n3  2013    11     3     1 LGA        2\n\n# OK, here 3 observations are twice. Probably a data error.\n# Example: Without hour it is not a key\nweather |> count(year, month, day, origin) |> filter(n > 1) \n\n# A tibble: 1,092 × 5\n    year month   day origin     n\n   <int> <int> <int> <chr>  <int>\n 1  2013     1     1 EWR       22\n 2  2013     1     1 JFK       22\n 3  2013     1     1 LGA       23\n 4  2013     1     2 EWR       24\n 5  2013     1     2 JFK       24\n 6  2013     1     2 LGA       24\n 7  2013     1     3 EWR       24\n 8  2013     1     3 JFK       24\n 9  2013     1     3 LGA       24\n10  2013     1     4 EWR       24\n# … with 1,082 more rows"
  },
  {
    "objectID": "W5_2.html#primary-and-foreign-keys",
    "href": "W5_2.html#primary-and-foreign-keys",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Primary and foreign keys",
    "text": "Primary and foreign keys\n\nA primary key uniquely identifies an observation in its own table. E.g, planes$tailnum in planes.\nA foreign key uniquely identifies an observation in another data frame E.g. flights$tailnum is a foreign key in flights because it matches each flight to a unique plane in planes.\nData frames need not have a key and the joins will still do their work.\nA primary key and a foreign key form a relation.\nRelations are typically 1-to-many. Each plane has many flights\nRelations can also be many-to-many. Airlines can fly to many airports; airport can host many airplanes."
  },
  {
    "objectID": "W5_2.html#joining-when-key-names-differ",
    "href": "W5_2.html#joining-when-key-names-differ",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Joining when key names differ?",
    "text": "Joining when key names differ?\nWe have to specify the key relation with a named vector in the by argument.\n\ndim(flights)\n\n[1] 336776     19\n\nflights |> left_join(airports, by = c(\"dest\" = \"faa\"))\n\n# A tibble: 336,776 × 26\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      517        515       2     830     819      11 UA     \n 2  2013     1     1      533        529       4     850     830      20 UA     \n 3  2013     1     1      542        540       2     923     850      33 AA     \n 4  2013     1     1      544        545      -1    1004    1022     -18 B6     \n 5  2013     1     1      554        600      -6     812     837     -25 DL     \n 6  2013     1     1      554        558      -4     740     728      12 UA     \n 7  2013     1     1      555        600      -5     913     854      19 B6     \n 8  2013     1     1      557        600      -3     709     723     -14 EV     \n 9  2013     1     1      557        600      -3     838     846      -8 B6     \n10  2013     1     1      558        600      -2     753     745       8 AA     \n# … with 336,766 more rows, 16 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, name <chr>, lat <dbl>, lon <dbl>,\n#   alt <dbl>, tz <dbl>, dst <chr>, tzone <chr>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\nWhy does the number of rows stays the same after joining?\n\nfaa is a primary key in airports."
  },
  {
    "objectID": "W5_2.html#left_join-essentially-right_join-with-switched-data-frames",
    "href": "W5_2.html#left_join-essentially-right_join-with-switched-data-frames",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "left_join essentially right_join with switched data frames",
    "text": "left_join essentially right_join with switched data frames\n\nairportsflights <- airports |> right_join(flights, by = c(\"faa\" = \"dest\"))\nairportsflights \n\n# A tibble: 336,776 × 26\n   faa   name        lat   lon   alt    tz dst   tzone  year month   day dep_t…¹\n   <chr> <chr>     <dbl> <dbl> <dbl> <dbl> <chr> <chr> <int> <int> <int>   <int>\n 1 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     1    1955\n 2 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     2    2010\n 3 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     3    1955\n 4 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     4    2017\n 5 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     5    1959\n 6 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     6    1959\n 7 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     7    2002\n 8 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     8    1957\n 9 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10     9    1957\n10 ABQ   Albuquer…  35.0 -107.  5355    -7 A     Amer…  2013    10    10    2011\n# … with 336,766 more rows, 14 more variables: sched_dep_time <int>,\n#   dep_delay <dbl>, arr_time <int>, sched_arr_time <int>, arr_delay <dbl>,\n#   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>, air_time <dbl>,\n#   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>, and abbreviated\n#   variable name ¹​dep_time\n\n\nDifferences\n\nIn a join where keys have different column names the name of the first data frame survives (unless you use keep = TRUE). Here, faa instead of dest\nThe columns from the first data frame come first\nThe order of rows is taken from the first data frame, while duplication and dropping of variables is determined by the second data frame (because it is a right_join)\n\nUsing the fact that flights seem to be ordered by year, month, day, dep_time we can re-arrange:\n\nairportsflights <- \n  airportsflights |> \n  rename(dest = faa) |> \n  select(names(flights)) |> # Use order of flights\n  arrange(year, month, day, dep_time)\n\nNote of caution: A deeper analysis shows that the order is still not exactly the same."
  },
  {
    "objectID": "W5_2.html#left_join-with-reversed-data-frames",
    "href": "W5_2.html#left_join-with-reversed-data-frames",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "left_join with reversed data frames",
    "text": "left_join with reversed data frames\n\ndim(airports)\n\n[1] 1458    8\n\ndim(flights)\n\n[1] 336776     19\n\nairports |> left_join(flights, by = c(\"faa\" = \"dest\"))\n\n# A tibble: 330,531 × 26\n   faa   name       lat    lon   alt    tz dst   tzone  year month   day dep_t…¹\n   <chr> <chr>    <dbl>  <dbl> <dbl> <dbl> <chr> <chr> <int> <int> <int>   <int>\n 1 04G   Lansdow…  41.1  -80.6  1044    -5 A     Amer…    NA    NA    NA      NA\n 2 06A   Moton F…  32.5  -85.7   264    -6 A     Amer…    NA    NA    NA      NA\n 3 06C   Schaumb…  42.0  -88.1   801    -6 A     Amer…    NA    NA    NA      NA\n 4 06N   Randall…  41.4  -74.4   523    -5 A     Amer…    NA    NA    NA      NA\n 5 09J   Jekyll …  31.1  -81.4    11    -5 A     Amer…    NA    NA    NA      NA\n 6 0A9   Elizabe…  36.4  -82.2  1593    -5 A     Amer…    NA    NA    NA      NA\n 7 0G6   William…  41.5  -84.5   730    -5 A     Amer…    NA    NA    NA      NA\n 8 0G7   Finger …  42.9  -76.8   492    -5 A     Amer…    NA    NA    NA      NA\n 9 0P2   Shoestr…  39.8  -76.6  1000    -5 U     Amer…    NA    NA    NA      NA\n10 0S9   Jeffers…  48.1 -123.    108    -8 A     Amer…    NA    NA    NA      NA\n# … with 330,521 more rows, 14 more variables: sched_dep_time <int>,\n#   dep_delay <dbl>, arr_time <int>, sched_arr_time <int>, arr_delay <dbl>,\n#   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>, air_time <dbl>,\n#   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>, and abbreviated\n#   variable name ¹​dep_time\n\n\nWhy does the number of rows changes after joining?\ndest is not a primary key in flights. There are more flights with the same destination so rows of airports get duplicated.\nWhy is the number of rows then less than the number of rows in flights?\nLet us do some checks:\n\nlength(unique(airports$faa))\n\n[1] 1458\n\nlength(unique(flights$dest))\n\n[1] 105\n\n# There are much more airports then destinations in flights!\n# ... but the rows of airports prevail when it is the first in a left_join.\n# So, the data frame should even increase because \n# we get several rows of airports without flights\n# Let us dig deeper.\n\nsetdiff( unique(airportsflights$faa), unique(flights$dest)) |> length()\n\n[1] 0\n\n# 1,357 airports have no flights. But also:\nsetdiff( unique(flights$dest), unique(airportsflights$faa)) |> length()\n\n[1] 105\n\n# There are four destinations in flights, which are not in the airports list!\n\n# How many flights are to these?\nflights |> \n  filter(dest %in% setdiff( unique(flights$dest), unique(airportsflights$faa))) |> \n  nrow()\n\n[1] 336776\n\n# 7,602 flights go to destinations not listed as airport\n\n# Check\nnrow(airports |> left_join(flights, by = c(\"faa\" = \"dest\"))) == nrow(flights) - 7602 + 1357\n\n[1] TRUE\n\n# OK, now we have a clear picture\n\nThe new number of observation after a join can be a complex combination of duplication and dropping."
  },
  {
    "objectID": "W5_2.html#definition-sets-and-vectors",
    "href": "W5_2.html#definition-sets-and-vectors",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Definition: Sets and vectors",
    "text": "Definition: Sets and vectors\nA set is mathematical model for the collection of different things.\nExamples:\n\n\\(\\{3, \\text{Hi}, 😀, 🖖 \\}\\)\n\\(\\{1,3,5\\}\\)\nThe natural numbers \\(\\mathbb{N} = \\{1, 2, 3, \\dots\\}\\) (infinite!)\n\\(\\{\\mathtt{\"EWR\"} \\mathtt{\"LGA\"} \\mathtt{\"JFK\"}\\}\\)\nthese are origin airports in flights"
  },
  {
    "objectID": "W5_2.html#math-sets-and-vectors-1",
    "href": "W5_2.html#math-sets-and-vectors-1",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Math: Sets and vectors",
    "text": "Math: Sets and vectors\nA vector is an ordered collection of things (elements) of the same type.\nIn a set each thing can only be once and the order does not matter!\n\\(\\{1,3,5\\} = \\{3,5,1\\} = \\{1,1,1,3,5,5\\}\\)\nFor vectors:\n\\([1\\ 3\\ 5] \\neq [3\\ 5\\ 1]\\) because we compare component-wise, so we cannot even compare with = \\([1\\ 1\\ 1\\ 3\\ 5\\ 5]\\)"
  },
  {
    "objectID": "W5_2.html#math-set-operations",
    "href": "W5_2.html#math-set-operations",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Math: Set operations",
    "text": "Math: Set operations\nFor sets \\(A = \\{🐺, 🦊, 🐶\\}\\) and \\(B = \\{🐶, 🐷, 🐹\\}\\):\n\nSet union \\(A \\cup B\\) = {🐺, 🦊, 🐶, 🐷, 🐹}\nSet intersection \\(A \\cap B\\) = {🐶}\nSet different \\(A \\setminus B\\) = {🐺, 🦊}$, \\(B \\setminus A\\) = {🐷, 🐹}"
  },
  {
    "objectID": "W5_2.html#set-operations-in-r",
    "href": "W5_2.html#set-operations-in-r",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Set operations in R",
    "text": "Set operations in R\nunique shows the set of elements in a vector\n\nunique(flights$origin)\n\n[1] \"EWR\" \"LGA\" \"JFK\"\n\n\nsetequal tests for set equality\n\nsetequal(c(\"EWR\",\"LGA\",\"JFK\"), c(\"EWR\",\"EWR\",\"LGA\",\"JFK\"))\n\n[1] TRUE\n\n\nunion, intersect, setdiff treat vectors as sets and operate as expected\n\nunion(1:5,3:7)\n\n[1] 1 2 3 4 5 6 7\n\nintersect(1:5,3:7)\n\n[1] 3 4 5\n\nsetdiff(1:5,3:7)\n\n[1] 1 2"
  },
  {
    "objectID": "W5_2.html#exploratory-data-analysis-1",
    "href": "W5_2.html#exploratory-data-analysis-1",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\n\nEDA is the systematic exploration of data using\n\nvisualization\ntransformation\ncomputation of characteristic values\nmodeling\n\n\n\nWe haven’t talked much about the latter two, but will do soon.\nComputation of characteristic values: Functions like mean, median, mode, standard deviation, or interquartile range\nModeling: Operations like linear regression or dimensionality reduction"
  },
  {
    "objectID": "W5_2.html#systematic-but-no-standard-routine",
    "href": "W5_2.html#systematic-but-no-standard-routine",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Systematic but no standard routine",
    "text": "Systematic but no standard routine\n\n“There are no routine statistical questions, only questionable statistical routines.” — Sir David Cox\n\n\n“Far better an approximate answer to the right question, which is often vague, than an exact answer to the wrong question, which can always be made precise.” — John Tukey"
  },
  {
    "objectID": "W5_2.html#systematic-but-no-standard-routine-1",
    "href": "W5_2.html#systematic-but-no-standard-routine-1",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Systematic but no standard routine",
    "text": "Systematic but no standard routine\n\nGoal of EDA: Develop understanding of your data.\nEDA’s iterative cycle\n\nGenerate questions about your data.\nSearch for answers by visualizing, transforming, and modelling your data.\nUse what you learn to refine your questions and/or generate new questions.\n\nEDA is fundamentally a creative process."
  },
  {
    "objectID": "W5_2.html#questions",
    "href": "W5_2.html#questions",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Questions",
    "text": "Questions\n\nThe way to ask quality questions:\n\nGenerate many questions!\nYou cannot come up with most interesting questions when you start.\n\nThere is no rule which questions to ask. These are useful\n\nWhat type of variation occurs within my variables?\n(Barplots, Histograms,…)\nWhat type of covariation occurs between my variables?\n(Scatterplots, Timelines,…)"
  },
  {
    "objectID": "W5_2.html#eda-embedded-in-a-data-science-project",
    "href": "W5_2.html#eda-embedded-in-a-data-science-project",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "EDA embedded in a data science project",
    "text": "EDA embedded in a data science project\n\nStating and refining the question\nExploring the data\nBuilding formal statistical models\nInterpreting the results\nCommunicating the results\n\n\n\nRoger D. Peng and Elizabeth Matsui. “The Art of Data Science.” A Guide for Anyone Who Works with Data. Skybrude Consulting, LLC (2015)."
  },
  {
    "objectID": "W5_2.html#six-types-of-questions",
    "href": "W5_2.html#six-types-of-questions",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Six types of questions",
    "text": "Six types of questions\n\nDescriptive: summarize a characteristic of a set of data\nExploratory: analyze to see if there are patterns, trends, or relationships between variables (hypothesis generating)\nInferential: analyze patterns, trends, or relationships in representative data from a population\nPredictive: make predictions for individuals or groups of individuals\nCausal: whether changing one factor will change another factor, on average, in a population\nMechanistic: explore “how” as opposed to whether\n\n\n\nLeek, Jeffery T., and Roger D. Peng. 2015. “What Is the Question?” Science 347 (6228): 1314–15. https://doi.org/10.1126/science.aaa6146."
  },
  {
    "objectID": "W5_2.html#data-analysis-flowchart",
    "href": "W5_2.html#data-analysis-flowchart",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Data Analysis Flowchart",
    "text": "Data Analysis Flowchart"
  },
  {
    "objectID": "W5_2.html#example-covid-19-and-vitamin-d",
    "href": "W5_2.html#example-covid-19-and-vitamin-d",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Example: COVID-19 and Vitamin D",
    "text": "Example: COVID-19 and Vitamin D\n\nDescriptive: frequency of hospitalisations due to COVID-19 in a set of data collected from a group of individuals\nExploratory: examine relationships between a range of dietary factors and COVID-19 hospitalisations\nInferential: examine whether any relationship between taking Vitamin D supplements and COVID-19 hospitalisations found in the sample hold for the population at large\nPredictive: what types of people will take Vitamin D supplements during the next year\nCausal: whether people with COVID-19 who were randomly assigned to take Vitamin D supplements or those who were not are hospitalised\nMechanistic: how increased vitamin D intake leads to a reduction in the number of viral illnesses"
  },
  {
    "objectID": "W5_2.html#questions-to-data-science-problems",
    "href": "W5_2.html#questions-to-data-science-problems",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Questions to data science problems",
    "text": "Questions to data science problems\n\nDo you have appropriate data to answer your question?\nDo you have information on confounding variables?\nWas the data you’re working with collected in a way that introduces bias?\n\n\n\nExample\nI want to estimate the average number of children in households in Bremen. I conduct a survey at an elementary school and ask pupils how many children, including themselves, live in their house. Then, I take the average of the responses.\n\nIs this a biased or an unbiased estimate of the number of children in households in Bremen?\nIf biased, will the value be an overestimate or underestimate?"
  },
  {
    "objectID": "W5_2.html#context-information-and-codebooks",
    "href": "W5_2.html#context-information-and-codebooks",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Context Information and Codebooks",
    "text": "Context Information and Codebooks\n\nNot all information is in the data!\nPotential confounding variables you infer from general knowledge\nInformation about data collection you may receive from an accompanying report\nInformation about computed variables you may need to look up in accompanying documentation\nInformation about certain variables you may find in an accompanying codebook. For example the exact wording of questions in survey data."
  },
  {
    "objectID": "W5_2.html#next",
    "href": "W5_2.html#next",
    "title": "W#5 More under the hood, Relational Data, Exploratory Data Analysis",
    "section": "Next",
    "text": "Next\nNext Week\n\nSummarizing functions for data\nSome more math background (linked to programming)\n\nHomework 03\n\nshall come over the weekend, due in two week\nwill move towards\n\nexploratory data analysis\nanswering questions (You have some technical tools now at hand.)\nasking question\n\n\n\n\n\n\nJU-F22-MDSSB-DSCO-02: Data Science Concepts\n\n\nHint: Everyone has read access to the project repositories https://github.com/JU-F22-MDSSB-MET-01/ess-ind-janlorenz and https://github.com/JU-F22-MDSSB-MET-01/corona-ind-janlorenz as an example for data access. This should help to unify work Homework 03."
  },
  {
    "objectID": "hw-instructions/hw-03-instr.html#european-social-survey",
    "href": "hw-instructions/hw-03-instr.html#european-social-survey",
    "title": "Homework 03",
    "section": "2 European Social Survey",
    "text": "2 European Social Survey\nContinue to work on your repository ess-ind-USERNAME and make the analysis in python-chunks. You have to look ESS Data Documentation https://ess-search.nsd.no/.\n\nCreate a new Quarto-document and save it as “ESS-analysis.qmd” (alternatively as “ESS-analysis.ipynb” if you can render html-files similarly from it).\n\n\nCustomize the YAML with the title “European Social Survey Analysis”, your name, and output format being a standalone html-file with embedded resources. Enable code-folding in the output html file.\nWrite a chunk labeled data where you load the tidyverse library and import the dataset you downloaded for Homework 02.\n\nDocument what you did: Write a headline ## Data before the chunk data and briefly describe the data source.\nFor each of the following questions write a fitting headline to structure your report.\n\n\n2.1 Question 1: What is the ranking of European countries with respect to of average satisfaction with life?\n\nCompute the average of stflife for each country-year combination. Make a table with four columns: the country name and the average life satisfaction for the years 2006, 2012, and 2018. Order the table by the values in 2018 and print it nicely in your report.\nTo that end, you must create new variables countryname from the two-character ISO-codes in cntyr (use the library pycountry) and a new variable year.\nBeware: The ESS variables have coded missing values as large numbers like 77 or 88. Find out these values and recode them as NA before computing averages!\n\nDescribe what you find remarkable in the table. (Who is on top? who at the bottom? Any interesting trends? Any geographical patterns?)\n\n\n\n2.2 Question 2: What is the relation of the emotional attachment of Europeans to their own country and to Europe?\nEmotional attachment to Europe may diminish emotional attachment to the country. Test if this is true with the variables atchctr and atcherp. First, look up the wording of the two questions and the answering options and write it into the report.\nBuild two visualizations and put them in the report. Beware: First recode the missing values as NA! (See above.)\n\nA visualization where you first count the number of individuals each combination of valid values of atchctr and atcherp. Then plot each combination as a dot with atchctr on the x-axis, atcherp on the y-axis, and the number of individuals represented by size and color and color of the dot.\nMake a lowess (locally weighted scatterplot smoothing) line of atchctr on the x-axis, atcherp on the y-axis using the function regplot from seaborn.\n\nAnswer the question based on the visualization.\n\n\n2.3 Question 3: What is the relation of the emotional attachment to the own country and the opinion about further of European integration?\nThis is analog to Question 2 with euftf instead of atcherp. First, look up the wording of euftf and the answering options and write it into the report. Beware: First recode the missing values as NA! (See above.)\nBuild two visualizations as above.\nAnswer the question.\n\n\n2.4 Question 4: How many observations are there for each country-year combination?\nCompute the numbers and list them nicely in a table in your report.\nAre the numbers roughly proportional to the population in these countries? Discuss if the answer creates some shortcomings about the answers to Questions 2 and 3. How could these be mitigated?\n\n\n2.5 Question 5: Answer your own exploratory question\nLook up questions behind the variables in the ESS data set, formulate a question, and answer it with summarizing, and visualization."
  },
  {
    "objectID": "hw-instructions/hw-03-instr.html#european-social-survey-1",
    "href": "hw-instructions/hw-03-instr.html#european-social-survey-1",
    "title": "Homework 03",
    "section": "3 European Social Survey",
    "text": "3 European Social Survey\n\ness-ind-USERNAME"
  }
]